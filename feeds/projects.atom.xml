<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>transistor.io</title><link href="http://www.transistor.io/" rel="alternate"></link><link href="http://www.transistor.io/feeds/projects.atom.xml" rel="self"></link><id>http://www.transistor.io/</id><updated>2014-07-27T00:00:00+00:00</updated><entry><title>Full wave rectifier</title><link href="http://www.transistor.io/full-wave-rectifier.html" rel="alternate"></link><updated>2014-07-27T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2014-07-27:full-wave-rectifier.html</id><summary type="html">&lt;p&gt;I has someone ask me about AC power and how to get a constant DC supply out of it. I though I’d do a quick write up on how a bridge rectifier works and get a little bit more experience modeling circuits in the process. &lt;/p&gt;
&lt;p&gt;For this example I’m showing the full wave rectifier. There’s also something called a half wave rectifier but the idea is essentially the same. The AC supply that comes out of your outlet in your house is 120V and 60Hz (in the US at least). Here’s a graph of what the voltage looks like that looks like over time. The time scale on this graph is 100ms or 0.1sec. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span6"&gt;
&lt;img alt="bridge" src="images/electronics/bridge3.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;This graph shows the voltage varying from +120V to -120V in a sine wave just like it should be. The time between peaks on the graph is 16.66ms which will give you exactly 60 peaks per second (or 60Hz). In order to get a DC voltage from this we can use a bridge rectifier. This uses four diodes that are arranged in what’s called a diode bridge. One easy way to think of it is as a device that take the negateive portion of the sine wave and flips it over to be positive. Here’s a schematic of a full wave rectifier using a diode bridge connected to a 120V 60Hz source. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span6"&gt;
&lt;img alt="bridge" src="images/electronics/bridge41.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;This is what the output voltage (Vout) will look like with this circuit. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span6"&gt;
&lt;img alt="bridge" src="images/electronics/bridge5.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Notice that the negative portion of the original sine wave is now flipped over. You can see this in the time between peaks (now 8.33ms). A good start but this would make a pretty poor power supply. The voltage now varies from nearly 0V to 120V. A good way to take care of this problem is to connect a capacitor across Vout and ground. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span6"&gt;
&lt;img alt="bridge" src="images/electronics/bridge2.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;This gives the circuit a way to store all that voltage. Vout with this circuit looks like this&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span6"&gt;
&lt;img alt="bridge" src="images/electronics/bridge1.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;In this graph the blue and red waves show the two phases in the input voltage. And green is Vout. As each of the input waves increases you can see the Vout increasing and charging the capacitor. Then as the input voltage drops off the capacitor starts discharging until the next input wave recharges it again. This makes for a much smoother output voltage. A neat thing to see from this graph is that the capacitor is actually supplying the voltage a majority of the time. There’s a small ripple voltage of about 10V but that’s much better than a 120V ripple. This 10V ripple can be further filtered but I’ll that for another post. &lt;/p&gt;</summary><category term="electroncis"></category></entry><entry><title>Getting started with Node, Express, and MongoDB</title><link href="http://www.transistor.io/getting-started-with-node-express-and-mongodb.html" rel="alternate"></link><updated>2014-03-28T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2014-03-28:getting-started-with-node-express-and-mongodb.html</id><summary type="html">&lt;p&gt;For this how-to guide, I decided to look into NodeJS.  I have played around with it before, but this was prior to starting a CS degree, and it went a bit over my head.  I though I would take another look at it and see if I can figure it out after getting a few CS classes under my belt.  I found many to-do lists and chat servers- both of which didn't seem to difficult to create.  I  wanted to complete a more substantial project with potential for future use.  I found a tutorial that uses &lt;a href="http://blog.ijasoneverett.com/2013/03/a-sample-app-with-node-js-express-and-mongodb-part-1/"&gt;Node with ExpressJS and MongoDB&lt;/a&gt; to create a web page that can interact with an employee database.&lt;/p&gt;
&lt;p&gt;This tutorial is great and well-put together. I got the origional site up very quickly, but as soon as I tried to make changes, it began to fall apart.  I think part of that was just because Javascript is very new to me and I think there is room for a similar tutorial but one that really breaks the application down and shows how it works.  I hope that after following this tutorial you will have a good understanding of how to use Node to set up a site like this.&lt;/p&gt;
&lt;p&gt;To do this I will be showing you  how to set up a very basic home brewing recipe website that will store data in MongoDB.&lt;/p&gt;
&lt;p&gt;Just so you know what you're getting into, here is a quick recording of me walking through the site.  All of the source files can be found on my &lt;a href="https://github.com/jdorweiler/beerDatabase"&gt;GitHub&lt;/a&gt; and a short video below shows the basic functionality.&lt;/p&gt;
&lt;div class="wrapper"&gt;
&lt;div class="videocontent"&gt;
&lt;video id="example_video_1" class="video-js vjs-default-skin vjs-playing"
  controls preload="auto" width="auto" height="auto"
  data-setup='{"example_option":true}'&gt;
 &lt;source src="images/node/clip.ogv" type='video/ogg' /&gt;
&lt;/video&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id="getting-started"&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;The Node website has install instructions for Linux, Mac, and Windows.  For this tutorial I'll be using Ubuntu 12.04. I can't make any guarentees for other operating systems, but assuming you can get Node installed, everything else should be the same.&lt;/p&gt;
&lt;p&gt;On Ubuntu, Node is very easy to install.  You can get Node and npm (Node Package Manager) installed by running:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo apt-get install nodejs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We will also be using ExpressJS and MongoDB.  Run the following commands to install Express&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo npm install express -g&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo npm install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Installing MongoDB is a bit more complicated, but still fairly easy.  Follow the instructions in this link to get your &lt;a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/"&gt;database set up&lt;/a&gt;.  While you are there, it wouldn't be a bad idea to have a look at the &lt;a href="http://mongodb.github.io/node-mongodb-native/"&gt;API&lt;/a&gt; before we get started.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hello World with Node and Express&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now that you have everything set up, make a new folder for your project and move to that directory.  In this directory, you can initialize the skeleton structure of the site by running&lt;/p&gt;
&lt;p&gt;&lt;code&gt;express -c stylus&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This also sets up your site to work with Stylus, which is a very simple css language.  We won't be using Stylus in this example, but it is standard to include it with Express.  And, it would be good to have when you perfect your site's appearance with some CSS.
The next step is to tell express that we are going to be working with MongoDB.  To do this, add a dependancy in the package.json file in the top level of your directory.  Do this by adding the line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;"mongodb": "&amp;gt;= 0.9.6-7"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;in the dependancy section.  Now running
&lt;code&gt;npm install -d&lt;/code&gt; will set everything up to work with MongoDB.  We can test out Node and Express to see if everything works by running&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ node app.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You should see a line on your terminal that says the Express server is listening on port 3000.  Open your favorite browser and go to the address 0:3000.&lt;/p&gt;
&lt;p&gt;&lt;img alt="img1" src="images/node/screen1.png" /&gt;&lt;/p&gt;
&lt;p&gt;Before we move on, it would be helpful to look at where this page came from.  Open up the app.js file located in the top level of your directory.  You should see a file like the one below that was automatically created for you when you ran the Express command above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Module dependencies.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./routes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./routes/user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// all environments&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;views&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;views&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;view engine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jade&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;favicon&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methodOverride&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;stylus&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;public&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;public&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

&lt;span class="c1"&gt;// development only&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;development&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;env&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errorHandler&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/users&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Express server listening on port &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can think of this file and the brains for the server.  The the function at the bottom &lt;code&gt;http.createServer&lt;/code&gt; is where the actual Node server is started.  Above that, we set the port using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's take a look at the routes.  The routes are going to be the functions that begin with &lt;code&gt;app.get()&lt;/code&gt; or &lt;code&gt;app.post()&lt;/code&gt;.  When the server gets a GET or POST request, we need to know what page to feed back to the browser.  This is where the routes are necessary.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This line tells Node what to do when we have a GET request for the page located at 0:3000/ or our index page.  Specifically, it is sending the page &lt;code&gt;routes.index&lt;/code&gt; back to the browser.  Inside the routes.index file you will see the following function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Express&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is using one of the &lt;a href="http://expressjs.com/api.html#app.render"&gt;Express API&lt;/a&gt; functions called render &lt;code&gt;render('index', { title: 'Express' }&lt;/code&gt;.  This simple line of code is more complex than I originally thought.  After much reading, my best explanaio ins that this renders a HTML string which is called a view in the API.  By default, Express looks in the &lt;code&gt;views&lt;/code&gt; folder for this index page and sends it a title called "Express".  In the index file within the views folder, there is simple html page that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;extends layout
block content
  h1= title
  p Welcome to #{title}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that this page is actually written in &lt;a href="http://jade-lang.com/"&gt;Jade&lt;/a&gt; which is the default HTML language used by Express.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;export.index&lt;/code&gt; is necessary because Node does not allowing sharing of variables between files.  By adding export, you are letting Node know that this variable can be used by other functions in other files.  In this case, the origional app.get function in our app.js file will serve us the HTML content.  Now that we have covered the basics of working with Node and Express, let's begin interacting with the MongoDB database.&lt;/p&gt;
&lt;h2 id="interacting-with-mongodb"&gt;Interacting with MongoDB&lt;/h2&gt;
&lt;p&gt;We need to make a few changes to our app.js file so that it will work with the database.  The way it is set up right now we are only sending static pages back to the browser.  We will add a few new functions to the app.js file that will call functions in a separate file that handles all the interaction with th edabase.  First we need to add a few lines in app.js.  In this case, I am going to be using a database called &lt;code&gt;RecipeProvider&lt;/code&gt;.  We will need to add in an additional dependancy for the database.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RecipeProvider = require('./recipeProvider').RecipeProvider;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This dependency tells Node to use module called recipeProvider, which we will write next.  In the top level of your directory, make a file called recipeProvider.js.  Note that this file name is case-sensitive and must match the file you loaded above using &lt;code&gt;require()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is a link the complete &lt;a href="https://github.com/jdorweiler/beerDatabase/blob/master/recipeProvider.js"&gt;recipeProvider.js&lt;/a&gt; file.  I will walk through this process in steps below.&lt;/p&gt;
&lt;p&gt;The first thing we need to do is set up our database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mongodb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mongodb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mongodb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;BSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mongodb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;BSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ObjectID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mongodb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ObjectID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is interesting to note that the&lt;a href="http://docs.mongodb.org/manual/reference/object-id/"&gt; ObjectID&lt;/a&gt; which is a function in the MongoDB API that allows us to create and use the ID strings that are used for keys in the database.  Above that line is the require statement for the &lt;a href="http://http://docs.mongodb.org/manual/core/document/"&gt;BSON &lt;/a&gt; API from MongoDB.  The database stores things in a format called BSON which is for our purposes is the same thing as JSON.  Here is an example of what a single beer recipe might look like in the database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;53063&lt;/span&gt;&lt;span class="nx"&gt;adaca24b99c255d4f09&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Belgan Tripel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Troegs La Grave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;grain&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Pilsner 2 Row&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Munich&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;12 lbs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2 lbs&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;hops&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Saaz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Willamette&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2 oz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2 oz&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;yeast&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Trappist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1 vial&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we set up a RecipeProvider object that will connect us to the database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// connect to the database&lt;/span&gt;
&lt;span class="nx"&gt;RecipeProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;node-mongo-recipe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;safe&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;auto_reconnect&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{}));&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="setting-up-our-html-pages"&gt;Setting up our HTML pages&lt;/h2&gt;
&lt;p&gt;Before we get too far, let's go set up our HTML pages.  For this demo, we will have an index, new recipe, and edit recipe pages.  Make a new file in the &lt;code&gt;views&lt;/code&gt; folder called &lt;code&gt;index.jade&lt;/code&gt;  Here is what our completed index page will look like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt;
&lt;span class="nx"&gt;head&lt;/span&gt;
&lt;span class="nx"&gt;body&lt;/span&gt;
  &lt;span class="nx"&gt;block&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;
    &lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;recipes&lt;/span&gt;
      &lt;span class="nx"&gt;div&lt;/span&gt;
        &lt;span class="nx"&gt;table&lt;/span&gt; 
          &lt;span class="nx"&gt;thead&lt;/span&gt;
            &lt;span class="nx"&gt;tr&lt;/span&gt;
              &lt;span class="nx"&gt;td&lt;/span&gt; &lt;span class="nx"&gt;Style&lt;/span&gt;
              &lt;span class="nx"&gt;td&lt;/span&gt; &lt;span class="nx"&gt;Recipe&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;
            &lt;span class="nx"&gt;tr&lt;/span&gt; 
            &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;recipe&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;recipes&lt;/span&gt;
                &lt;span class="nx"&gt;tr&lt;/span&gt;
                    &lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;recipe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;
                    &lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;recipe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; 
                    &lt;span class="nx"&gt;td&lt;/span&gt;
                        &lt;span class="nx"&gt;div&lt;/span&gt;
                            &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/recipe/:id/delete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                            &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;recipe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toHexString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
                            &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;edit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;float: right&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
                    &lt;span class="nx"&gt;td&lt;/span&gt;
                        &lt;span class="nx"&gt;div&lt;/span&gt;
                            &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/recipe/:id/edit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                            &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;recipe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toHexString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
                            &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;edit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;edit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;float: right&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

        &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/recipe/new&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;add new recipe&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Don't forget that for this demo, we are using Express with Jade as our HTML template language.  All of the typical rules of HTML still apply, but with Jade you don't need to use closing tags.  Jade is however whitespace sensitive, so you must indent anything that would be in that particular tag.  It also distinguishes between tabs and 4-spaces.  You must be consistent throughout the page, so choose one style and stick with it.&lt;/p&gt;
&lt;p&gt;A neat discovery with Jade is that you can use loops and conditionals right inline with the other code.  For example see the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;recipe&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;recipes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use the &lt;code&gt;-&lt;/code&gt; to tell Jade that you want to use a loop or conditional, and then no braces are needed.  In this page, we are creating a table which will have two header cells that display the recipe title and name.  Below the table, we are going to loop through an array called recipes. For each recipe in the array, we will print out the title and name in separate cells.  To the right of each recipe, we will have buttons that will allow you to delete and edit a recipe.  At the bottom of the page, we leave a link to the new recipe page.  While not functional yet, here is a preview of what the front page will look like once finished.&lt;/p&gt;
&lt;p&gt;&lt;img alt="screen4" src="images/node/screen4.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now that we have the index page completed, let's make the add new recipe page.  Make a new file called &lt;code&gt;new_recipe.jade&lt;/code&gt; in your views folder.  Here is what our new recipe page will look like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;layout&lt;/span&gt;
&lt;span class="nx"&gt;block&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;
    &lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;
    &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newrecipe&lt;/span&gt;
        &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;table&lt;/span&gt;
                &lt;span class="nx"&gt;tr&lt;/span&gt;
                    &lt;span class="nx"&gt;div&lt;/span&gt;
                        &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
                        &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Recipe Style&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;editRecipeTitle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
                        &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Recipe Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;editRecipeName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;tr&lt;/span&gt;
                    &lt;span class="nx"&gt;div&lt;/span&gt;
                        &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;Grain&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
                        &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grain&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Grain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;editRecipeGrain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
                        &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grain-ammount&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;editRecipeAmount&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nx"&gt;div&lt;/span&gt;
                        &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;Grain&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
                        &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grain&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Grain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;editRecipeGrain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
                        &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grain-ammount&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;editRecipeAmount&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;tr&lt;/span&gt;
                    &lt;span class="nx"&gt;div&lt;/span&gt;
                        &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;Hops&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
                        &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hops&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Grain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;editRecipeGrain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
                        &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hops-ammount&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;editRecipeAmount&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;tr&lt;/span&gt;
                    &lt;span class="nx"&gt;div&lt;/span&gt;
                        &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;Hops&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
                        &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hops&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Grain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;editRecipeGrain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
                        &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hops-ammount&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;editRecipeAmount&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;tr&lt;/span&gt;
                    &lt;span class="nx"&gt;div&lt;/span&gt;
                        &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;Yeast&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
                        &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yeast&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Grain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;editRecipeGrain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
                        &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yeast-ammount&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;editRecipeAmount&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;editRecupeSubmit&lt;/span&gt;
                &lt;span class="nx"&gt;br&lt;/span&gt;
                &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Save&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;br&lt;/span&gt;
        &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Back to Recipe List&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This page will render a form with a box for a recipe title, name, 2 grains, 2 hops, and 1 type of yeast.  Take a look at the names for each of the input boxes.  We will use these to create our JSON array that will be sent to the database. Here is the actual JSON data that will be sent after we submit the form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;New Beer Style&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Recipe Name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;grain&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
   &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1 Grain Name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2 Grain Name&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
     &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1 Grain Amt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2 Grain Amt&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;hops&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1 Hops&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2 Hops&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1 Hops Amt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2 Hops Amt&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;yeast&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Yeast Name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Yeast Amt&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="setting-up-the-routes"&gt;Setting up the routes&lt;/h2&gt;
&lt;p&gt;Now that we have the index and new recipe pages ready, let's set up the routes for the site in the &lt;code&gt;app.js&lt;/code&gt; file.  The complete app.js file is a bit long, so I'll link the full version here: &lt;a href="https://github.com/jdorweiler/beerDatabase/blob/master/app.js"&gt;app.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Think back to the hello world example at the beginning of the tutorial, and you will recognise that &lt;code&gt;app.get&lt;/code&gt; functions.  We will use the same idea to create routes for the site by definiing different &lt;code&gt;app.get&lt;/code&gt; and &lt;code&gt;app.post&lt;/code&gt; functions.  Let's look at the route for our new index page. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;recipeProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recip&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Recipes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;recipes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;recip&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function above will use our recipeProvider object, which we connected to the database using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;recipeProvider&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RecipeProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27017&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function will be called whenever we have a GET request to the &lt;code&gt;'/'&lt;/code&gt; address.  When this function is called, it will use the &lt;code&gt;findAll()&lt;/code&gt; method (which we still have to write, see next section) which will return our recipes from the database.  Then we use &lt;code&gt;render()&lt;/code&gt; just like we did in the hello world page to render our &lt;code&gt;index.jade&lt;/code&gt; page and send it the recipes.  This will produce the front page with a table of recipes that I showed you earlier.&lt;/p&gt;
&lt;p&gt;If you want to test out your index page right now, you can do so by first starting MongoDB in a separate terminal using&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo mongod&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and then running your app.js file&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ node app.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If that worked you should now have a blank recipe page.&lt;/p&gt;
&lt;p&gt;Our index page is pretty boring without any recipies on it, so let's write the routes to handle the &lt;code&gt;recipe_new.jade&lt;/code&gt; page.  First we need to write the function that handles a GET request to the page since we are going to go to the page through the normal link at the bottom of the index page.  This follows the same idea as the other route fuctions.  A GET request to this page will call the function which will render the recipe_new.jade page and send the title "New Recipe".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/recipe/new&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;recipe_new&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;New Recipe&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;More interesting is the function we need to handle a POST from the new recipe page.  Remember that we are submitting the data as a form, so we need a way to handle the POST.  Inside of this function, we are going to call the &lt;code&gt;save()&lt;/code&gt; method (we still need to write this) and we will send the save method our JSON data, which we will then format using this fuction.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/recipe/new&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;recipeProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;grain&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grain-ammount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
        &lt;span class="nx"&gt;hops&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hops&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hops-ammount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
        &lt;span class="nx"&gt;yeast&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;yeast&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;yeast-ammount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice how the formatting in this function matches the JSON data I showed you earlier.  We can use &lt;code&gt;req.param&lt;/code&gt; and the name from our form to get each of the values and put them into the proper format.  After the save function returns, it redirects us back to the index page (using a GET) and renders our new recipe in the table.&lt;/p&gt;
&lt;h2 id="interacting-with-the-database"&gt;Interacting with the database&lt;/h2&gt;
&lt;p&gt;Before our index and new recipe pages will work, we must write the two methods getAll and Save to work with MongoDB.  These will be kept in the recipeProvider.js file in the top level of your directory.  To get the two pages working, we will need two methods for getting a collection&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// internal functions use to get a collection from the database&lt;/span&gt;
&lt;span class="nx"&gt;RecipeProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCollection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;recipes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recipe_collection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recipe_collection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// get all the recipes in the database&lt;/span&gt;
&lt;span class="nx"&gt;RecipeProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findAll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recipe_collection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;recipe_collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;RecipeProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;recipes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recipe_collection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;recipe_collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;recipes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recipes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just a note about the terminology used with MongoDB since it differs from SQL:  tables are called collections and rows are called documents.&lt;/p&gt;
&lt;p&gt;Before using any of the methods, we need to get the collection using &lt;code&gt;getCollection()&lt;/code&gt;.  This returns a collection instance with the name "recipes".  In the findAll function, we get the collection and then use the &lt;code&gt;find()&lt;/code&gt; method to return all documents in the collection. Now that we have our recipes in an array, we return the recipe array (called results) to the calling function, which is this case is findAll() funciton that renders our index page back in the app.js file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;recipeProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recip&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We then send the results to the index page, which is now an array called "recipes".  Hopefull your index.jade file will start to make a bit more sense now.  Take a look at the lines below.  Now that the recipes are sent to the index file, we can display the values using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;recipe.title
recipe.name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we can loop through the enteries in the recipe array using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;recipe&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;recipes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another important thing to pay attention to in the index file is the line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;recipe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toHexString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since we are going to have buttons for editing and deleting a single recipe, we need a way to store its id.  By setting the value of a hidden input to store the id, we can pass it using a POST request. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adding new entries&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now we still need to add some recipes to the database, so let's write function to handle that.  Take a look above at the &lt;code&gt;RecipeProvider.prototype.save()&lt;/code&gt; function.  Remember that this function is going to be called by the functoin &lt;code&gt;app.post('/recipe/new'&lt;/code&gt; in the app.js file.  This was the function above in the "setting up routes" section where we built our JSON data to send to the database.  This is where all that hard work is going to pay off.  We just need to pass the JSON data to the &lt;code&gt;insert()&lt;/code&gt; method and our new recipe is stored.&lt;/p&gt;
&lt;p&gt;If you start up your page again (Note: don't forget to restart Node after changing any js files) and this time click on the link to add a new recipe you should get this page:&lt;/p&gt;
&lt;p&gt;&lt;img alt="screen3" src="images/node/screen3.png" /&gt;&lt;/p&gt;
&lt;p&gt;We can finish off the site by adding in the routes for the edit and delete buttons on the index page.  When we click on the delete (X) button on the front page, it will make a POST request to /recipe/:id/delete.  The name of the address isn't really important since we won't even be rendering this page.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/recipe/:id/delete&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;recipeProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instead, with this route we will call the delete method from the recipeProvider.js file passing it the id of the document we want to remove.  Our callback is then just a redirect back to the index page.  The rest of the functions and routes are very similar to the ones I've already walked through. so I'll leave those alone.&lt;/p&gt;
&lt;p&gt;Before we finish up, there are a few tricky areas I encountered while working on this project.  Hopefully this tutorial will save you hours of debugging.  The first problem I had was trying to get a single document using the id.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;recipe_collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bson_serializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createFromHexString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;recipeId&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I assumed that I could just send it the id number and it would find or remove that document, but unfortunatly that wasn't the case.  I'm still not sure what it needed, but I tested it by just passing the id and it does not work this way.&lt;/p&gt;
&lt;p&gt;The next problem I had occurred when searching for documents using the &lt;code&gt;find()&lt;/code&gt; function.  An example of this issue can be found in the search function in recipeProvider.js.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;RecipeProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchterm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recipe_collection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;recipe_collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;searchterm&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recipe&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recipe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt; 
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I though that find() would return the data in an array or as JSON, but instead it returned a pointer to the location of the results.  You have to actually use the &lt;code&gt;toArray()&lt;/code&gt; to move the pointer to the location of the data which is an array.  I finally made this discovery after digging through the &lt;a href="http://docs.mongodb.org/manual/reference/method/cursor.toArray/"&gt;API docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And my last debugging tip:  Don't forget to restart Node after making changes to the javascript files! (that one got me a few times).&lt;/p&gt;</summary></entry><entry><title>Turtlebot with voice control</title><link href="http://www.transistor.io/turtlebot-with-voice-control.html" rel="alternate"></link><updated>2014-01-29T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2014-01-29:turtlebot-with-voice-control.html</id><summary type="html">&lt;p&gt;Here's a short video of my turtlebot responding ot voice commands using the &lt;a href="http://wiki.ros.org/pocketsphinx"&gt;Pocketsphinx ROS package&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/mDXA0MtXZos" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="ros"></category><category term="robotics"></category><category term="turtlebot"></category></entry><entry><title>Color blob tracking with ROS</title><link href="http://www.transistor.io/color-blob-tracking-with-ros.html" rel="alternate"></link><updated>2013-12-29T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2013-12-29:color-blob-tracking-with-ros.html</id><summary type="html">&lt;p&gt;Here's is short tutorial on how to do colored blob tracking using ROS Hydro and the cmvision package.  This is building on the package that I build in the &lt;a href="http://www.transistor.io/turtlebot-line-follower.html"&gt;line follower&lt;/a&gt; demo.  Here's a video of the color tracking.&lt;/p&gt;
&lt;iframe width="420" height="315" src="//www.youtube.com/embed/l21KOSKY15Q" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The first setep is to get the cmvision library.  That will depend on the version of ROS that you are using but for Hydro it's:&lt;/p&gt;
&lt;p&gt;&lt;code&gt; sudo apt-get ros-hydro-cmvision &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once you have that installed you need to figure out what color you want to track.  In my case I just used a brightly colored balloon. You get better results using something that will stand out from the rest of the objects in a room.  To find the color to track run: &lt;/p&gt;
&lt;p&gt;&lt;code&gt; rosrun cmvision colorgui image:=/camera/rgb/image_color&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;You may need to replace the image topic with whatever image topic your camera is on.  After that the image gui will open.  Place your colored object to track in view of the camera and click on it in the gui.  You should see a box form around the object.  If you don't get a box try clicking the object again.  Keep clicking until you get a box around the whole object.  If you click on it too many times you may start picking up other objects with similar colors in the room.  If that happens just restart the gui and start over.  Once you have a good box around the object move it to another spot in the camera view and repeat the process.  The idea is to have the tracking work for the different variations of lighting in the room. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span6"&gt;
&lt;img alt="stirrer" src="images/turtlebot/color.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Copy down the YUV values to use in your colors.txt file.  If you want to track more than one object then restart the gui and repeat the whole process again to get another YUV value.  After you finish move to your cmvision directory and open a file called "colors.txt".  This is the file that will determine what is going to be tracked.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[colors]&lt;/span&gt;

&lt;span class="err"&gt;(0,&lt;/span&gt; &lt;span class="err"&gt;255,&lt;/span&gt; &lt;span class="err"&gt;0)&lt;/span&gt;  &lt;span class="err"&gt;0.000000&lt;/span&gt; &lt;span class="err"&gt;15&lt;/span&gt; &lt;span class="err"&gt;Green&lt;/span&gt;

&lt;span class="k"&gt;[thresholds]&lt;/span&gt;

&lt;span class="err"&gt;(47:87,&lt;/span&gt; &lt;span class="err"&gt;148:162,&lt;/span&gt; &lt;span class="err"&gt;93:&lt;/span&gt; &lt;span class="err"&gt;113)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;An example of my colors.txt file is above.  The colors value determines the color and line width of the box that is displayed around the object.  This corresponds to the threshold where you need to input the YUV values for each object that you wrote down earlier. For multiple objects just add a new color and threshold line.&lt;/p&gt;
&lt;p&gt;To run the blob tracker and check your work run:
&lt;code&gt; roslaunch cmvision cmvision.launch&lt;/code&gt;  You may need to edit the cmvision.launch file to subscribe to your image topic.  The default image topic in the launch file was not set to the same topic as my camera (/camera/rgb/image_color).&lt;/p&gt;
&lt;p&gt;Here is the code below.  See my comments inside for details on how it works.  This is mostly an extension on my &lt;a href="http://www.transistor.io/turtlebot-line-follower.html"&gt;line follower&lt;/a&gt; code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;roslib&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;roslib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load_manifest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;color_tracking&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;rospy&lt;/span&gt;
&lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;geometry_msgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Twist&lt;/span&gt;
&lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;cmvision&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Blobs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Blob&lt;/span&gt;
&lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;create_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TurtlebotSensorState&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;global&lt;/span&gt;
&lt;span class="nx"&gt;turn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;turning&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt;
&lt;span class="nx"&gt;blob_position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;checks&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;see&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="nx"&gt;blobs&lt;/span&gt; &lt;span class="nx"&gt;were&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="nx"&gt;then&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;loop&lt;/span&gt; &lt;span class="nx"&gt;through&lt;/span&gt; &lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="nx"&gt;Since&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;sometimes&lt;/span&gt; &lt;span class="nx"&gt;find&lt;/span&gt; &lt;span class="nx"&gt;many&lt;/span&gt; &lt;span class="nx"&gt;blobs&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;same&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nx"&gt;just&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;average&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;could&lt;/span&gt; &lt;span class="nx"&gt;also&lt;/span&gt; &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="nx"&gt;take&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;sure&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;only&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;doesn&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t use multiple blobs but if are tracking several &lt;/span&gt;
&lt;span class="s1"&gt;# objects you need to check the /data.blobs.color topic for&lt;/span&gt;
&lt;span class="s1"&gt;# the color tag you put in your colors.txt file. &lt;/span&gt;
&lt;span class="s1"&gt;#&lt;/span&gt;
&lt;span class="s1"&gt;# after we have the x value we just make the robot turn to &lt;/span&gt;
&lt;span class="s1"&gt;# keep it in the center of the image.&lt;/span&gt;

&lt;span class="s1"&gt;def callback(data):&lt;/span&gt;
&lt;span class="s1"&gt;    global turn&lt;/span&gt;
&lt;span class="s1"&gt;    global blob_position&lt;/span&gt;

&lt;span class="s1"&gt;    if(len(data.blobs)):&lt;/span&gt;

&lt;span class="s1"&gt;        for obj in data.blobs:&lt;/span&gt;
&lt;span class="s1"&gt;        blob_position = blob_position + obj.x&lt;/span&gt;
&lt;span class="s1"&gt;        blob_position = blob_position/len(data.blobs)&lt;/span&gt;

&lt;span class="s1"&gt;        rospy.loginfo(&amp;quot;blob is at %s&amp;quot;%blob_position)&lt;/span&gt;
&lt;span class="s1"&gt;        # turn right if we set off the left cliff sensor&lt;/span&gt;
&lt;span class="s1"&gt;        if( blob_position &amp;gt; 350 ):&lt;/span&gt;
&lt;span class="s1"&gt;            turn = -0.5&lt;/span&gt;
&lt;span class="s1"&gt;        # turn left if we set off the right cliff sensor&lt;/span&gt;
&lt;span class="s1"&gt;        if( blob_position &amp;lt; 200 ):&lt;/span&gt;
&lt;span class="s1"&gt;            turn = 0.5&lt;/span&gt;

&lt;span class="s1"&gt;        if( blob_position &amp;gt; 200 and blob_position &amp;lt; 350):&lt;/span&gt;
&lt;span class="s1"&gt;            turn = 0.0&lt;/span&gt;
&lt;span class="s1"&gt;    else: &lt;/span&gt;
&lt;span class="s1"&gt;        turn = 0.0&lt;/span&gt;

&lt;span class="s1"&gt;def run():&lt;/span&gt;
&lt;span class="s1"&gt;    global blob_position&lt;/span&gt;
&lt;span class="s1"&gt;    # publish twist messages to /cmd_vel&lt;/span&gt;
&lt;span class="s1"&gt;    pub = rospy.Publisher(&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;mobile_base&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;velocity&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;, Twist)&lt;/span&gt;

&lt;span class="s1"&gt;    #subscribe to the robot sensor state&lt;/span&gt;
&lt;span class="s1"&gt;    rospy.Subscriber(&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;blobs&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;, Blobs, callback)&lt;/span&gt;
&lt;span class="s1"&gt;    rospy.init_node(&amp;quot;color_tracker&amp;quot;)&lt;/span&gt;

&lt;span class="s1"&gt;    global turn&lt;/span&gt;
&lt;span class="s1"&gt;    twist = Twist()&lt;/span&gt;

&lt;span class="s1"&gt;    while not rospy.is_shutdown():&lt;/span&gt;

&lt;span class="s1"&gt;        # turn if we hit the line&lt;/span&gt;
&lt;span class="s1"&gt;        if ( turn != 0.0 ):&lt;/span&gt;
&lt;span class="s1"&gt;            str = &amp;quot;Turning %s&amp;quot;%turn&lt;/span&gt;
&lt;span class="s1"&gt;            rospy.loginfo(str)&lt;/span&gt;
&lt;span class="s1"&gt;            twist.linear.x = 0.0; twist.linear.y = 0; twist.linear.z = 0&lt;/span&gt;
&lt;span class="s1"&gt;            twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = turn&lt;/span&gt;
&lt;span class="s1"&gt;            turn = 0.0&lt;/span&gt;

&lt;span class="s1"&gt;            # straight otherwise&lt;/span&gt;
&lt;span class="s1"&gt;        else:&lt;/span&gt;
&lt;span class="s1"&gt;            str = &amp;quot;Straight %s&amp;quot;%turn&lt;/span&gt;
&lt;span class="s1"&gt;            rospy.loginfo(str)&lt;/span&gt;
&lt;span class="s1"&gt;            twist.linear.x = 0.0; twist.linear.y = 0; twist.linear.z = 0&lt;/span&gt;
&lt;span class="s1"&gt;            twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = 0&lt;/span&gt;

&lt;span class="s1"&gt;            # send the message and delay&lt;/span&gt;
&lt;span class="s1"&gt;        pub.publish(twist)&lt;/span&gt;
&lt;span class="s1"&gt;    blob_position = 0&lt;/span&gt;
&lt;span class="s1"&gt;        rospy.sleep(0.1)&lt;/span&gt;

&lt;span class="s1"&gt;if __name__ == &amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;__main__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;rospy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ROSInterruptException&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you have the tracker running you can run the python code above by using:&lt;/p&gt;
&lt;p&gt;&lt;code&gt; python color_tracker.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;assuming that you named it color_tracker.py.&lt;/p&gt;</summary><category term="ros"></category><category term="robotics"></category></entry><entry><title>Turtlebot line follower</title><link href="http://www.transistor.io/turtlebot-line-follower.html" rel="alternate"></link><updated>2013-12-16T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2013-12-16:turtlebot-line-follower.html</id><summary type="html">&lt;p&gt;from scratch.  So now the turtlebot is running a version of ROS Fuerte and I have the newest verson of ROS Hydro on a virtual box for my workstation.
I put together a simple line following program to test everything out.  You can follow along to create your own or just grab the completed project
from my github repo.&lt;/p&gt;
&lt;p&gt;One new thing I ran into is that creating packages with Hydro is a little different than before.  You still use the same arguments but 
this time create a new package using catkin_create_package.  The package we will make is going to use std_msgs, rospy, and the 
turtlebot_node.  To do this move into your working directory and run the following&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;catkin_create_pkg line_follower std_msgs rospy turtlebot_node&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use roscreate_pkg if you are still on an older version of ROS.  You should have a line_follower directory in you workspace now.  Move to that
directory and create a nodes folder.  In the nodes folder we will create the actual python program that will run the robot.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;roslib&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;roslib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_manifest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;line_follower&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rospy&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;geometry_msgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Twist&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;turtlebot_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TurtlebotSensorState&lt;/span&gt;

&lt;span class="cp"&gt;#global&lt;/span&gt;
&lt;span class="n"&gt;turn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;processSensing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TurtlebotSensorState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="n"&gt;turn&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;turn&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="n"&gt;cliff&lt;/span&gt; &lt;span class="n"&gt;sensor&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;TurtlebotSensorState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cliff_left_signal&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1100&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;turn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;turn&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="n"&gt;cliff&lt;/span&gt; &lt;span class="n"&gt;sensor&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;TurtlebotSensorState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cliff_right_signal&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;turn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt; &lt;span class="n"&gt;twist&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cmd_vel&lt;/span&gt;
    &lt;span class="n"&gt;pub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rospy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Publisher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cmd_vel&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Twist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;subscribe&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;robot&lt;/span&gt; &lt;span class="n"&gt;sensor&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;
    &lt;span class="n"&gt;rospy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Subscriber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;turtlebot_node&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sensor_state&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TurtlebotSensorState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;processSensing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rospy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Line_Follower&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="n"&gt;turn&lt;/span&gt;
    &lt;span class="n"&gt;twist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Twist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;rospy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_shutdown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;turn&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;hit&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;turn&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Turning %s&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;turn&lt;/span&gt;
            &lt;span class="n"&gt;rospy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loginfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;turn&lt;/span&gt;
            &lt;span class="n"&gt;turn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;

            &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;straight&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;
        &lt;span class="nl"&gt;else:&lt;/span&gt;
            &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Straight %s&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;turn&lt;/span&gt;
            &lt;span class="n"&gt;rospy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loginfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

            &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt;
        &lt;span class="n"&gt;pub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;rospy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nl"&gt;try:&lt;/span&gt;
        &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;rospy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ROSInterruptException&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's pretty simple but here's a quick rundown of how it works.  First we need the standard
line of imports.  Be sure to include the twist to send commands to the robot and the robot's 
sensor state which we will use to read the IR cliff sensors. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;roslib&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;roslib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_manifest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;line_follower&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rospy&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;geometry_msgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Twist&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;turtlebot_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TurtlebotSensorState&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we declare a global variable called "turn".  This will store the angular rate that we
want the robot to turn at.  &lt;/p&gt;
&lt;p&gt;The processSensing function checks the left and right cliff sensors against a calibrated number. 
This just sets the turning variable to a positive or negative number based on which cliff sensor
is being triggered. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;processSensing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TurtlebotSensorState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="n"&gt;turn&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;turn&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="n"&gt;cliff&lt;/span&gt; &lt;span class="n"&gt;sensor&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;TurtlebotSensorState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cliff_left_signal&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1100&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;turn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;turn&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="n"&gt;cliff&lt;/span&gt; &lt;span class="n"&gt;sensor&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;TurtlebotSensorState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cliff_right_signal&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;900&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;turn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get correct value you will have to experiment with the sensors to see what values it give on 
a carpet or tape surface. To check your sensor values you can use rostopic.  In a terminal window first check to see that the robot
is running by checking &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;rostopic&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see topics from turtlebot_node in there.  After that you can see the sensor states for the robot 
by running &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;rostopic&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;turtlebot_node&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;TurtlebotSensorState&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the sensor state output look for values for the left and right cliff sensors.  Then put the robot on different surfaces
and note the change in values.  Once we use the processSensing function to check our cliff sensor values and set the appropriate turning value we can actually send the twist message. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;turn&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Turning %s&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;turn&lt;/span&gt;
    &lt;span class="n"&gt;rospy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loginfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;twist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;turn&lt;/span&gt;
    &lt;span class="n"&gt;turn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This sends the robot a linear twist message or 0.2 and an angular twist based on the turn variable we set earlier.&lt;/p&gt;
&lt;p&gt;Here's the final program in action&lt;/p&gt;
&lt;iframe width="420" height="315" src="//www.youtube.com/embed/sCZsQ8SJDBI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="robotics"></category><category term="ros"></category><category term="turtlebot"></category></entry><entry><title>Revisiting Lane Detection using OpenCV</title><link href="http://www.transistor.io/revisiting-lane-detection-using-opencv.html" rel="alternate"></link><updated>2013-08-16T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2013-08-16:revisiting-lane-detection-using-opencv.html</id><summary type="html">&lt;p&gt;I originally tried to get lane detection working for my &lt;a href="tag/autonomous-car.html"&gt;autonomous car&lt;/a&gt; project a little over a year ago.  I ended up getting some rough code working but it was really only useful on ideal roads with perfectly painted lines.  At the time I didn't know a whole lot about computer vision so I ended up ditching the computer vision part of the project to focus on other areas. &lt;/p&gt;
&lt;p&gt;So now I'm back with a new project that requires computer vision.  The goal of this new project (which will be another post later on) is to track objects at relatively long distances of 60 meters or more.  The list of off the shelf sensors that can do this is pretty slim with the best being LIDAR sensors that will run you ~$60K.  I plan instead to use a CV algorithm to track objects and a laser range finder on a two axis servo mount to locate objects.  The crux of this project being again the CV algorithm.  To start off I'm getting my feet wet by revisiting the lane finding algorithm.  &lt;/p&gt;
&lt;p&gt;I'm not going at it alone and instead decided to pick up a few books on OpenCV.  "Learning OpenCV" has some now outdated code but also has some great explanations for how the different CV algorithms work.  I've been using this as my theory book that I reference when trying to figure out how a particular CV functions works.  The "OpenCv Cookbook" has been good for examples on how to actually write the code.  I'm borrowing a bit of the code from the line detection chapter of this book to do lane detection.   &lt;/p&gt;
&lt;p&gt;I'll walk through the code step by step with images of each function as we go. &lt;/p&gt;
&lt;p&gt;To start off I'm reading in the image to process from the terminal: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Read input image&lt;/span&gt;
    &lt;span class="n"&gt;Mat&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;h4&gt; Original Image &lt;/h4&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span6"&gt;
&lt;img alt="image" src="images/Lanes/original.bmp" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;This is the standard test image that I've been working with since the autonomous car project.  I think it gives a best case scenario for what a road should look like.  &lt;/p&gt;
&lt;p&gt;From the original I apply two main filters. The first being a &lt;a href="http://docs.opencv.org/doc/tutorials/imgproc/imgtrans/hough_lines/hough_lines.html"&gt; Hough transform&lt;/a&gt;  The Hough filter uses a binary map as its' input.  One way to produce a binary map is with a Canny algorithm. Canny runs a gradient on the image to find sharp changes in the pixel intensities.  These are likely contours in the image.  The output is then just a binary map that shows you were the contours of the image are located.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   &lt;span class="c1"&gt;// Canny algorithm&lt;/span&gt;
    &lt;span class="n"&gt;Mat&lt;/span&gt; &lt;span class="n"&gt;contours&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Canny&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;contours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Mat&lt;/span&gt; &lt;span class="n"&gt;contoursInv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;contoursInv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;THRESH_BINARY_INV&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;h4&gt; Contour Image &lt;/h4&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span6"&gt;
&lt;img alt="image" src="images/Lanes/contours.bmp" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Next is to actually apply the Hough transform.  I'll save the detained explanations for the texts and just show you part that's important for understanding my code.  The Hough transform represents lines using two parameters rho and theta.  Rho is the distance of the line from the origin (upper left corner) and theta is the angle of the line perpendicular to the detected line.  These two parameters can be useful later on if you want to filter lines out based on their angle or location on the image. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Vec2f&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;houghVote&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;lines.size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="c1"&gt;// we lost all lines. reset &lt;/span&gt;
        &lt;span class="n"&gt;houghVote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;houghVote&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt; 
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lines.size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;houghVote&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;HoughLines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;houghVote&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;houghVote&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;houghVote&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;Mat&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contours.rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;contours.cols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;CV_8U&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Scalar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;image.copyTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One of the troubles I ran into was how to set the value for the minimum number points passing through a line (houghVote).  The best way I found to do this was to set a feedback loop starting with a high number of required points.  The houghVote decreases until if finds at least two lines.  For the next frame, in the case of a video, we increment houghVote by 25 to make sure not to miss any new lines that might appear. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   &lt;span class="c1"&gt;// Draw the limes&lt;/span&gt;
    &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Vec2f&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;const_iterator&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lines.begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;Mat&lt;/span&gt; &lt;span class="nx"&gt;hough&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image.size&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="nx"&gt;CV_8U&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Scalar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="nx"&gt;lines.end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nx"&gt;float&lt;/span&gt; &lt;span class="n"&gt;rho&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;   // first element is distance rho
        float theta= (*it)&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;; // second element is angle theta

        //if (theta &lt;span class="nt"&gt;&amp;lt; PI&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;20&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt; &lt;span class="err"&gt;||&lt;/span&gt; &lt;span class="na"&gt;theta&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 19.*PI/20.) { // filter theta angle to find lines with theta between 30 and 150 degrees (mostly vertical)

            // point of intersection of the line with first row
            Point pt1(rho/cos(theta),0);        
            // point of intersection of the line with last row
            Point pt2((rho-result.rows*sin(theta))/cos(theta),result.rows);
            // draw a white line
            line( result, pt1, pt2, Scalar(255), 8); 
            line( hough, pt1, pt2, Scalar(255), 8);
        //}

        //std::cout &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &amp;quot;line: (&amp;quot; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt; rho&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="na"&gt;theta&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;)\&lt;/span&gt;&lt;span class="na"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;;&lt;/span&gt; 
        &lt;span class="err"&gt;++&lt;/span&gt;&lt;span class="na"&gt;it&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;Below&lt;/span&gt; &lt;span class="na"&gt;is&lt;/span&gt; &lt;span class="na"&gt;the&lt;/span&gt; &lt;span class="na"&gt;result&lt;/span&gt; &lt;span class="na"&gt;of&lt;/span&gt; &lt;span class="na"&gt;the&lt;/span&gt; &lt;span class="na"&gt;Hough&lt;/span&gt; &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;h4&gt; Hough Image &lt;/h4&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span6"&gt;
&lt;img alt="image" src="images/Lanes/hough.bmp" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;After that in a separate copy of the image I run a &lt;a href="http://docs.opencv.org/modules/imgproc/doc/feature_detection.html?highlight=houghlinesp#houghlinesp"&gt; Probabilistic Hough Transform &lt;/a&gt; which is pretty much the same as the regular Hough Transform but this one finds the ends of each line.  To do this I first created a lineFinder instance (from OpenCV Cookbook), set minimum line length, gap, and vote.  Then the contour image is sent through the probabilistic transform.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   &lt;span class="c1"&gt;// Create LineFinder instance&lt;/span&gt;
    &lt;span class="nx"&gt;LineFinder&lt;/span&gt; &lt;span class="nx"&gt;ld&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="c1"&gt;// Set probabilistic Hough parameters&lt;/span&gt;
    &lt;span class="nx"&gt;ld.setLineLengthAndGap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ld.setMinVote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="c1"&gt;// Detect lines&lt;/span&gt;
    &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Vec4i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;li&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ld.findLines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contours&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;Mat&lt;/span&gt; &lt;span class="nx"&gt;houghP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image.size&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="nx"&gt;CV_8U&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Scalar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;ld.drawDetectedLines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;houghP&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br&gt;
&lt;h4&gt; Probabilistic Hough Image &lt;/h4&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span6"&gt;
&lt;img alt="image" src="images/Lanes/houghP.bmp" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Now I have both a regular Hough transform image and a probabilistic transform image.  I noticed that both tend to do a good job finding lanes.  The regular transform does not find endpoints and the probabilistic tends to find the lanes a several other lines that I don't want.  To solve this problem I do a bitwise addition of the two images.  The two Hough images were first drawn on separate blank images then sent to bitWise_and() which outputs only the lines that appear in both images.  The result is the final processed image below. 
&lt;br&gt;
&lt;h4&gt; Processed Image &lt;/h4&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span6"&gt;
&lt;img alt="image" src="images/Lanes/processed.bmp" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;And finally here is a video of the algorithm running. 
&lt;br&gt;
&lt;iframe width="420" height="315" src="//www.youtube.com/embed/vaj7P-6MByo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The algorithm seems to do an okay job of finding the lanes in the video.  A few problems are that it also picks up lines from other things like power lines and the horizon.  To fix this I'm working on added a region of interest to the camera image.  I can use this to only process the area where there is likely to be a lane.  Another thing I'd like to add is a filter that removes vertical and horizontal lines using the theta angle calculated from the Hough transform.   &lt;/p&gt;</summary><category term="computer vision"></category></entry><entry><title>Homebuilt Turtlebot</title><link href="http://www.transistor.io/homebuilt-turtlebot.html" rel="alternate"></link><updated>2013-06-25T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2013-06-25:homebuilt-turtlebot.html</id><summary type="html">&lt;p&gt;The bigger and slightly less hacked together brother to my &lt;a href="ros-on-a-roomba.html"&gt;Autonomous Roomba&lt;/a&gt; is the &lt;a href="http://www.willowgarage.com/turtlebot"&gt;Turtlebot&lt;/a&gt;.  If you haven't heard of the Turtlebot, just let me say that it is probably the coolest creation of hobby and research robotics.
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span4"&gt;
&lt;img alt="1st" src="images/turtlebot/turtlebot.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The downside is that the ready to go kits are pretty expensive at around $1000, which puts it out of the range for most hobbiests.  If you have been here before, then you know what happened next.  Here's the BOM for my homebuilt turtlebot.  You end up spending a bit more on the mini-ITX board but this board has the advantage of comming with a built in step-up power regulator.  That let's me get away with running it off of an 11.1V LiPo.  Most of the boards I found needed 19V to run which means you would need to spend more to get a bigger battery and external power regulator. &lt;/p&gt;
&lt;table class="table table-condensed"&gt;
&lt;thead&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://store.irobot.com/product/index.jsp?productId=2586252"&gt;iRobot Create&lt;/a&gt; $130&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Used Kinect sensor ~$50 on eBay&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.mini-box.com/Intel-DN2800MT-Mini-ITX-Motherboard"&gt;Mini-ITX-Motherboard&lt;/a&gt; $110&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12x rechargable AA for the Create ~$30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11.1V 5Ah LiPo for the motherboard $22&lt;/td&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You will also need a laptop hard drive.  Mine was free from an old laptop.  The robot's frame was made out of 1/4 inch birch board that I bought at a hardware store.  The standoffs were made from a 1/4 inch aluminum rod cut into sections and drilled on a lathe.  In hindsight, I should have looked for standoffs online since building them on the lathe was more work than I expected.  The total for all the structural parts was around $20, which puts the total for the homebuilt Turtlebot at $362-excluding any shipping charges.  Still much cheaper! &lt;/p&gt;
&lt;p&gt;Here's how the assembled layers look 
&lt;br&gt;
&lt;h3&gt; Bottom Level &lt;/h3&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;img alt="1st" src="images/turtlebot/createlayer.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
The Create with the wood frame that will support the rest of the levels.  The 12V battery sits in the cargo bay.
&lt;br&gt;
&lt;h3&gt; First Level &lt;/h3&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;img alt="1st" src="images/turtlebot/layer1.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
This layer holds the hard drive and a busbar for power distribution.   The Kinect requires 12V and is connected directly to the busbar.  Not pictured is a barrel jack that I added later in order to power the board off of a wall supply for running off battery. 
&lt;br&gt;
&lt;h3&gt; Second Level &lt;/h3&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;img alt="1st" src="images/turtlebot/layer2.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
Not much to see here.  This is just the motherboard sitting on some small nylon standoffs. 
&lt;br&gt;
&lt;h3&gt; Battery Voltage Alarm &lt;/h3&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span5"&gt;
&lt;img alt="1st" src="images/turtlebot/batteryalarm.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
I also made a low voltage alarm for the LiPo battery.  It runs off of an ATtiny powered from the Create's 5V power.  The battery's balance port plugs into the header and the micro monitors the votage on the first cell through a resistor divider.  After a bit of calibration, I got the Red and Green LEDs to blink in different patterns based on the battery voltage.&lt;/p&gt;</summary><category term="robotics"></category><category term="roomba"></category><category term="turtlebot"></category></entry><entry><title>Autonomous Car Summary</title><link href="http://www.transistor.io/autonomous-car-summary.html" rel="alternate"></link><updated>2013-06-23T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2013-06-23:autonomous-car-summary.html</id><summary type="html">&lt;p&gt;The information for my autonomous car project is starting to get a bit spread out between all the update posts, so I though making a nice summary was in order.
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span5"&gt;
&lt;img alt="finalcar" src="images/car/finalcar.png" /&gt;
yes my workbench is a mess
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jdorweiler.github.io/autonomous-car-pt1.html" target="_blank"&gt;&lt;h4&gt;Part 1&lt;/h4&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In part 1, I laid out my plans for the navigation algorithm and spent some time working on the computer vision part of the project.  I was looking at sending an unboard camera image from my Android phone to a laptop to do some lane detection.  The large variation between different roads posed a problem.  I did get the algorithm to work pretty well with a perfect-looking road.  There were also some issues with lag between sending the image, processing, and sending it back.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jdorweiler.github.io/autonomous-car-pt2.html" target="_blank"&gt;&lt;h4&gt;Part 2&lt;/h4&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In part 2, I officially scrapped the computer vision aspect.  The car got an upgrade from an Arduio Uno to an Arduino Mega (more I/O was needed).  I had some trouble with the Uno lacking serial ports.  Both the Xbee radio and the GPS needed a serial port, but the Uno only had one.  One way to solve this problem is to use software serial, but it has interrupts that interfere with the servo PWM generator.&lt;/p&gt;
&lt;p&gt;I was a bit worried about the computation time on the Arduino, so I thought about upgrading again to a ChipKit Max32, which uses a much faster 80MHz PIC32 microcontroller.&lt;/p&gt;
&lt;p&gt;I also built a separate dead-man switch using a ATtiny85 microcontroller.  The idea was to have a separate IC monitor the radio signal from the hand held transceiver.  If the signal was lost, then the ATtiny would tell the car to shut down.
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span5"&gt;
The ATtiny dead-man switch
&lt;img alt="kill switch" src="images/car/killswitch.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jdorweiler.github.io/autonomous-car-pt3.html" target="_blank"&gt;&lt;h4&gt;Part 3&lt;/h4&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In part three, I upgraded the car to a ChipKit Max32.  Since this board runs at 3.3v, I also hacked together a microSD card breakout to start logging data.  I also added an LCD, which was great for debugging the code as the car ran. &lt;/p&gt;
&lt;p&gt;The car made its first semi-successful run down a straight road and back but had some trouble with GPS signal.  I started working on adding dead reckoning to the code to fix address this issue.
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span5"&gt;
&lt;img alt="car3" src="images/car/car3.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jdorweiler.github.io/autonomous-car-pt4.html" target="_blank"&gt;&lt;h4&gt;Part 4&lt;/h4&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The car finally made what I'll call its first real autonomous run.  It navigated an "X" pattern in a parking lot.&lt;/p&gt;
&lt;p&gt;I played around with different ways to deal with a short term loss of GPS.  I tried placing the GPS headings into a FIFO array and calculating the average heading of the array.  My thought was that a few missed GPS updates would only slightly change the average of the array.  This method worked well, but it also had the same effect on new valid GPS data.  The end result was significant lag in the heading update, so I dropped this part of the code.&lt;/p&gt;
&lt;p&gt;Instead, the solution ended up being dead reckoning.  When the GPS signal is lost, the Kalman filter is bypassed and the heading is instead calculated using only the gyroscope.  This seemed to work well, but since the gyroscope will drift, it is only good for short durations. 
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span4"&gt;
&lt;img alt="" src="images/car/car4.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jdorweiler.github.io/ugv-board-for-the-autonomous-car.html"&gt;&lt;h4&gt;UGV Board (custom PCB)&lt;/h4&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I decided to play around with Eagle, which was new to me, to make a PCB for the car.  I had the PCB (UGV Board) printed at OSHpark.  They turned out great!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span5"&gt;
&lt;img alt="board2" src="images/UGV/UGVBoard2.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jdorweiler.github.io/autonomous-car-in-design-contest.html"&gt;&lt;h4&gt;Autonomous Car Design Contest&lt;/h4&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally I submitted my project for the ChipKit Design Contest.  For the entry video, I ran through all the features of the car and I got a nice Go-pro video of the car driving around a parking lot.  Now even better, thanks to more PID tuning. 
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span2"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/05YKrlu1n3M" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;</summary><category term="robotics"></category><category term="programming"></category><category term="autonomous car"></category></entry><entry><title>Python Asteroids Game</title><link href="http://www.transistor.io/python-asteroids-game.html" rel="alternate"></link><updated>2013-06-22T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2013-06-22:python-asteroids-game.html</id><summary type="html">&lt;p&gt;This is the final project for the &lt;a href="https://class.coursera.org/interactivepython-002/class/index"&gt;Interactive Python course&lt;/a&gt;. 
The game runs from the browser using the SimpleGUI plugin.  It works best on Google Chrome. 
Here's a link to the &lt;a href="http://www.codeskulptor.org/#user16_mp0Icyz9R0_15.py"&gt;Asteroids Game&lt;/a&gt;&lt;/p&gt;
&lt;iframe src="http://pastebin.com/embed_iframe.php?i=cFcA3S3D" style="border:none;width:100%;height:200px;"&gt;&lt;/iframe&gt;</summary><category term="programming"></category></entry><entry><title>Autonomous Car on HackADay.com</title><link href="http://www.transistor.io/autonomous-car-on-hackadaycom.html" rel="alternate"></link><updated>2013-06-16T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2013-06-16:autonomous-car-on-hackadaycom.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="images/car/hackaday.png" /&gt;&lt;/p&gt;
&lt;p&gt;My Autonomous car project is all over the internet 
* &lt;a href="http://hackaday.com/2013/06/16/autonomous-rc-car-navigates-by-waypoints/"&gt;Hackaday&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://dangerousprototypes.com/2013/06/18/autonomous-car-build/"&gt;Dangerous Protoypes&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://hackedgadgets.com/2013/06/17/autonomous-car-build//"&gt;Hacked Gadgets&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="autonomous car"></category><category term="robotics"></category><category term="hackaday"></category></entry><entry><title>Autonomous Car in Design Contest</title><link href="http://www.transistor.io/autonomous-car-in-design-contest.html" rel="alternate"></link><updated>2013-06-14T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2013-06-14:autonomous-car-in-design-contest.html</id><summary type="html">&lt;p&gt;I entered my autonomous car into a design contest held by the makers of the ChipKit board that I used. Here's the video I used for my entry.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span2"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/05YKrlu1n3M" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
To help explain the car's navigation algorithm I made a flow chart that shows how each part of the algorithm interacts with the sensors (click for a larger image). 
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span2"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;a href="https://raw.github.com/jdorweiler/Autonomous-Car/master/Program%20Flow%20Diagram.png"&gt;&lt;img alt="alt text" src="images/car/ProgramFlowDiagram.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="robotics"></category><category term="programming"></category><category term="autonomous car"></category></entry><entry><title>ROS on a Roomba</title><link href="http://www.transistor.io/ros-on-a-roomba.html" rel="alternate"></link><updated>2013-06-05T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2013-06-05:ros-on-a-roomba.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="images/roomba/title.png" /&gt;&lt;/p&gt;
&lt;p&gt;I came across an unused iRobot Roomba at &lt;a href="http://www.fubarlabs.org"&gt;FUBAR labs&lt;/a&gt; and though this would be 
the perfect opportunity to build a robot using the Robotic Operating System &lt;a href="http://www.wikipedia.org/wiki/ROS_%28Robot_Operating_System%29"&gt;(ROS)&lt;/a&gt;.  ROS is basically software that's used integrate all a robot's sensors (encoders, depth camera, laser scanner ect..) with the code that's used to control it.  All of the sensors run as a node.  For example, the Kinect
sensor node publishes its depth data.  The SLAM (localization and mapping) node will uses the Kinect data to determine the 
robot's location and publish to other nodes.  Each node is separate from the others so it's easy to change or add new ones.
ROS also has a ton of built in &lt;a href="http://www.ros.org/wiki/Sensors"&gt;libraries&lt;/a&gt; that work with different servos, laser scanners, and other sensors.  &lt;/p&gt;
&lt;p&gt;The Roomba is essentially the same thing as the iRobot Create, which is the base used for the 
&lt;a href="http://www.willowgarage.com/turtlebot"&gt;Turtlebot&lt;/a&gt; designed by Willow Garage (another ROS robot).  In the picture below, I've got the Roomba on the bottom, the laptop that will be running ROS, and a Kinect sensor on top.  Not pictured is the workstation, which is just another computer running ROS and used to render the localization data. 
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;img alt="roomba" src="images/roomba/roomba.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
After a bit of searching, I found 
out that someone had already created a ROS stack for the Roomba.  Unfortunately, I ran into a lot of trouble getting it to work
and later found out that the Roomba stack is a bit buggy.  The good thing about the similarity between the Turtlebot and Roomba is
that you can use the Turtlebot stack with just a few small changes.  From this post on &lt;a href="http://answers.ros.org/question/47094/turtlebot-roomba-dashboard/?answer=47096#post-id-47096"&gt;ROS answers&lt;/a&gt; I learned that a few changes to the Turtlebot launch file were
needed.  The code below is what I've got working on my Roomba right now.&lt;/p&gt;
&lt;iframe src="http://pastebin.com/embed_iframe.php?i=eLqFvK6d" style="border:none;width:100%;height:300px;""&gt;&lt;/iframe&gt;

&lt;h2&gt;Teleoperation and Mapping&lt;/h2&gt;

&lt;p&gt;Here are some examples of the Roomba working with the teleoperation and SLAM packages at &lt;a href="http://www.fubarlabs.org"&gt;FUBAR labs&lt;/a&gt;.  In the first video, I'm driving the Roomba
around with the keyboard on the workstation using the teleop package.  The Roomba is running the SLAM package, mapping, and sending its data back to the workstation for visualization.  The
white circle on the map is the Roomba and white lines moving around in front of the robot are where it thinks it's seeing an object based on the Kinect data.
There was a bit of trouble with the communication between
the two that caused the robot's localization to jump around.  I think this was the result of my workstation trying to run ROS, 
display the visualization data, and record a screen video.  This slowed the computer down almost to the point where it was unusable. I did manage to get some video though. 
&lt;br&gt;
&lt;br&gt;
        &lt;div class="row"&gt;
        &lt;div class="span1"&gt;
        &lt;/div&gt;
        &lt;div class="span9"&gt;
&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/XTUC-DoW4uQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
        &lt;/a&gt;
        &lt;/div&gt;
        &lt;/div&gt;
&lt;br&gt;
&lt;br&gt; 
In the video below, I thought it would be nice to show the depth image from the Kinect along with the map.  This caused
the workstation to lag quite a bit as you can see in the video.  Still it shows some nice images of the Kinect. 
&lt;br&gt;
&lt;br&gt;
        &lt;div class="row"&gt;
        &lt;div class="span1"&gt;
        &lt;/div&gt;
        &lt;div class="span9"&gt;
&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/ynAjzHpw1XU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
        &lt;/a&gt;
        &lt;/div&gt;
        &lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
I made a better map later on of my apartment.  No video for that one but here is an image of the map.  It's still a little
messy, but I was able to use this map to have the Roomba autonomously navigate around my apartment.
This was using the Adaptive Monte Carlo Localization &lt;a href="http://www.fubarlabs.org"&gt;(AMCL)&lt;/a&gt;
package which uses a particle filter to localize the robot.&lt;br /&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span9"&gt;
&lt;img alt="slam" src="images/roomba/SLAMmap.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="robotics"></category><category term="ros"></category><category term="computer vision"></category><category term="turtlebot"></category></entry><entry><title>Autonomous Car pt.4</title><link href="http://www.transistor.io/autonomous-car-pt4.html" rel="alternate"></link><updated>2013-05-12T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2013-05-12:autonomous-car-pt4.html</id><summary type="html">&lt;H3&gt;It finally drives!&lt;/H3&gt;

&lt;p&gt;I've done a lot more work on the code for the autonomous car. I played around with running
the GPS heading updates through a FIFO array to try and smooth out any irregular data before
sending it to the Kalman filter. I was a bit worried that this would slow down the heading
updates too much, and it did. It evens out the data, but also causes a significant lag, making the
car pretty much undriveable. I commented out the FIFO code, but left it in there in case anyone
finds a use for it later on. You can find the latest version of my navigation code on my &lt;a href="https://github.com/jdorweiler/Autonomous-Car" target="_blank"&gt;Github page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I started playing around with the core timer on the PIC micro. Right now I'm using the core timer
to change the update rate for the SD logger and the LCD screen. Previously, both of them were
updating every time through the control loop. With the control loop running at around 50Hz,
it produces a ton of data. Instead, I slowed down the update rate to 250ms. Although I haven't
verified it yet, slowing down the writing to the SD card should speed up the control loop.&lt;/p&gt;
&lt;p&gt;I made some changes to the navigation portion of the code. It still sends the new GPS heading
updates through the Kalman filter with the gyroscope angular rate, but now uses dead reckoning
from the gyroscope in between GPS updates. But enough talk- let's get to some pictures and
videos.
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span5"&gt;
It now has a roof top LCD that displays heading information while the car is driving.
&lt;img alt="" src="images/car/car4.png" /&gt;
&lt;/div&gt;
&lt;div class="span5"&gt;
I've also started working on replacing the breadboard with a PCB.  This is still in progress.
&lt;img alt="" src="images/car/pcb.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
Here is a plot of a run in a parking lot. The car's GPS tracks and heading vectors are plotted for each time
step. This plot was made using Octave and then Inkscape to overlay the Octave plot on a satellite image.
The waypoints are the red circles.&lt;/p&gt;
&lt;p&gt;The car's goal was to start in the bottom right coroner, move to the top left, down to the bottom left,
then back up to the top right, making an X shape in the parking lot. There's a bit of messy data where it
first starts out at the bottom right due to a parked car getting in the way.
&lt;br&gt; 
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span11"&gt;
&lt;img alt="" src="images/car/figure1.png" /&gt;
&lt;/div&gt; 
&lt;/div&gt;
&lt;br&gt;
And finally here's the video the the car driving through the parking lot.
&lt;br&gt;
&lt;iframe width="420" height="315" src="http://www.youtube.com/embed/Nk3QN_DsACc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;
&lt;br&gt;
You can see in the video around 0:30 where the car gets lost at the third waypoint in the top right, but
eventually found its way back on track. It's still not clear to me from the data why this happened. I chose
the X pattern to test the car's ability to pick the shortest direction to turn toward the next waypoint. It
seems to be doing that very well, but is over-shooting the turns, which should be solved by some small
adjustments to the PID.&lt;/p&gt;</summary><category term="robotics"></category><category term="programming"></category><category term="autonomous car"></category></entry><entry><title>Hacked Roomba Motors and Related Robots</title><link href="http://www.transistor.io/hacked-roomba-motors-and-related-robots.html" rel="alternate"></link><updated>2013-04-27T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2013-04-27:hacked-roomba-motors-and-related-robots.html</id><summary type="html">&lt;p&gt;I acquired a broken 5XX series iRobot Roomba courtesy of &lt;a href="https://www.fubarlabs.org"&gt;FUBAR Labs&lt;/a&gt; and decided to tear it apart to see what useful parts I could harvest.  I ended up with many IR emitters/receivers, power FETs with heatsinks, but the biggest surprise was the motors.  I expected to get some relativly low cost motors with an equally cheap encoder.  Instead, I got two nice geared motors with digital encoders!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span2"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;iframe width="420" height="315" src="http://www.youtube.com/embed/2D0yhQgylkw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Some tests with the motors showed that they were geared 1:64 and ~90rpm at 12V.  The motor has a radial magnet hall effect encoder with 8-bit resolution (265 ticks).  In the video, I am using an arduino to count encoder ticks with a rising interrupt and PID control to make to motor turn one revolution.  The scope is showing the encoder signal in red and the PWM signal to the H-bridge in yellow. &lt;/p&gt;
&lt;p&gt;Given the price of a busted roomba and all its useful parts, I think these are a great find for a robotists on a budget.&lt;/p&gt;
&lt;h3&gt;Enough talk though, I promised robots&lt;/h3&gt;

&lt;p&gt;The first robot is a remake of my &lt;a href="http://jdorweiler.github.io/site2/balancing-robot.html"&gt;balancing robot&lt;/a&gt;.  The code to run this robot was basically the same as the previous one.  I made a few small changes for it to work with DC motors though.  The yellow frame for the robot is laser cut acrylic that I made on the &lt;a href="https://www.fubarlabs.org"&gt;FUBAR Labs&lt;/a&gt; laser cutter.  The changes for the code are on my &lt;a href="https://github.com/jdorweiler/BalancingRobotDC"&gt;GitHub page&lt;/a&gt;.
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;iframe width="420" height="315" src="http://www.youtube.com/embed/F3q0O5wcUIk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
I harvested many IR sensors from the roomba.  The front bumper is one long string of emitters and receivers.  One of the more interesting receivers is the 360 degree IR receiver located on top the Roomba.  It's a pretty simple sensor with just a regular IR receiver pointed upward at a convex mirrior.  This setup looks perfect for a remote control robot.  The code was pretty simple- just the basic DC motor control from the balancing robot- and I added in an IR remote library that I found online to decode the signal.
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span5"&gt;
&lt;img alt="robot" src="images/roombahack/differentialdrive.png" /&gt;
&lt;/div&gt;
 &lt;div class="span5"&gt;
&lt;img alt="sensor" src="images/roombahack/sensor.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
I made some small changes to the placement of the motors and added a third caster wheel to make a differential drive robot. The arduino board controlling the motors also decodes the IR signal from the remote to tell the robot what to do. 
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;iframe width="420" height="315" src="http://www.youtube.com/embed/9B_c42w4Py8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;&lt;/p&gt;</summary><category term="robotics"></category><category term="roomba"></category></entry><entry><title>Autonomous Car pt.3</title><link href="http://www.transistor.io/autonomous-car-pt3.html" rel="alternate"></link><updated>2013-04-05T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2013-04-05:autonomous-car-pt3.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="images/car/title_3.png" /&gt; &lt;/p&gt;
&lt;p&gt;It's been a while since my last update on the autonomous car project. Lots of things have been
changed or redone. The biggest upgrade was replacing the Arduino mega with a Chipkit max32,
which I had discussed in my last post. The increased speed of the Chipkit board has really
improved the car. The first thing I noticed was that the loop time decreased from about 50ms
on the Arduino to around 20ms with the Chipkit. This means that the gyro scope data can be
updated much faster and helps produce a more accurate heading. I highlighted most of the car's
new features in the image below.
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span10"&gt;
&lt;img alt="car3" src="images/car/car3.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
One of the added bonuses of the Chipkit is that it has a 3.3V logic level. This works out well since all the
sensors are also 3.3V, and I could easily add an SD card for data logging without having to buy a level
converter or filling up my breadboard with tons of voltage dividers. I’m using a microSD card adaptor
with a header soldered on it and a 512mb microSD card to the data logging. Keeping track of all the car’s
data has been a huge help. I easily caught several bugs already that I would have otherwise had to spend
days trying to figure out.&lt;/p&gt;
&lt;p&gt;The LCD was also a very helpful addition. Being able to see the data right on the screen while the car
was trying to drive itself into a river is very useful. Right now it displays the Kalman heading (from the
GPS/Gyro), the GPS heading, the heading difference, and the distance to the next waypoint. That's
about all that will fit on the small screen.
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span5"&gt;
&lt;img alt="lcd" src="images/car/lcd.png" /&gt;
&lt;/div&gt;
&lt;div class="span5"&gt;
&lt;img alt="lcd2" src="images/car/lcd2.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
With all of that and a lot of work on the code, the car project is going really well. I still need to get a
video of it, but for its run today, the car drove down the street meeting 3 waypoints and then returning
to the starting point. The only intervention needed was a quick save from driving into a deep puddle (no
puddle detection yet). The image below shows the car's gps coordinates plotted on a map. The blue line
is the calculated path between waypoints, and the red line is the actual path the car took. Notice that it
gets a little messy where the car turns around. That's where the car nearly drove into a puddle.
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span10"&gt;
&lt;img alt="gps" src="images/car/gps.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
The code is still far from ideal, so I’m working on a few new changes right now. The GPS signal seems to
be a bit noisy at times. Looking back on the heading data collected during a run, I can see that the car is
properly correcting its heading to meet the waypoint. The problem is that a new GPS update will throw
the heading off. Sometimes this has been as large as 15-20 degrees, which cause the car to think that its
way off course.&lt;/p&gt;
&lt;p&gt;I thought the Kalman filter should take care of this problem, but it doesn’t seem to fix it. It may be a bug
in my Kalman code or perhaps I need to smooth out the heading data first. I’m looking into both options
right now. To smooth out the heading data, I’m working on some code that will store several heading
updates in a first-in-first-out array. That should correct any big changes in GPS heading.&lt;/p&gt;
&lt;p&gt;I’m also working on adding &lt;a href="http://en.wikipedia.org/wiki/Dead_reckoning" target="_blank"&gt;dead reckoning&lt;/a&gt; to the code.  With this the car will calculate it’s current heading off of only the gyroscope in-between GPS updates.  This would also make it easy to add in a function that tells the car to only use the gyro if the GPS signal drops out or it the quality of drops too much. &lt;/p&gt;</summary><category term="robotics"></category><category term="programming"></category><category term="autonomous car"></category></entry><entry><title>UGV Board for the Autonomous Car</title><link href="http://www.transistor.io/ugv-board-for-the-autonomous-car.html" rel="alternate"></link><updated>2012-11-24T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2012-11-24:ugv-board-for-the-autonomous-car.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="images/UGV/title.png" /&gt;&lt;/p&gt;
&lt;p&gt;UGV Board v1.1
 &lt;p&gt;Unmanned Ground Vehicle board for the ChipKit Max32&lt;/p&gt;
 The UGV board is my attempt to put together all the things I found useful in building my &lt;a href="http://jdorweiler.github.io/site2/tag/autonomous-car.html"&gt;autonomous car&lt;/a&gt; and a few new features that I thought would be good to have.  As always you can find the latest source files for all my work on my &lt;a href="https://github.com/jdorweiler"target="_blank"&gt;Github page&lt;/a&gt;.  The goal was to build a board that will work well with my autonomous car setup but also have the ability to adapt for use in other autonomous robotics projects.
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;img alt="eagle" src="images/UGV/eaglebrd.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
At the time of writing this the UGV v1.1 has the following features. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Onboard gyroscope&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MicroSD card&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Breakout for a GPS antenna &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Breakout of an external LCD attached with the same ribbon connector used in the autonomous car&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Xbee radio&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two breakouts designed for encoders with built-in hysteresis using 555 timers and LEDs to show each encoder tick&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Breakout for four analog sensor pins.  Powered off the +5V rail. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Breakout for six servo/esc pins powered off an externally supplied voltage (determined by the user) and a large low ESR capacitorto prevent large voltage drops &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;img alt="board" src="images/UGV/UGVBoard.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
The un-assembled board.  These were made using the &lt;a href="http://www.oshpark.com" target="_blank"&gt;OSH Park&lt;/a&gt; board printing service and turned out looking great.  Below is the board after assembly.  I went with 0402 (0.4 mm × 0.2 mm) for many of the SMT components which I found out is really pushing the limit of soldering without a microscope. 
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;img alt="board2" src="images/UGV/UGVBoard2.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
The good part is that everything works! (after a few small modifications...)  I forgot to connect the CS and SDO pins on the gyroscope to the input voltage.  The CS pin needs to be pulled high to select the I&lt;sup&gt;2&lt;/sup&gt;C interface and the SDO pin needs to be pulled high to select the chips address, 105 in this case.  I ended up having to hand solder a single copper strand from these pins to one of the nearby +3.3V vias to pull them up.  You can see it sticking out from under the Xbee in the picture above.  And for some reason the SD card holder's ground pins didn't get connected to the ground fill.  Not sure how that happened but it was a pretty easy fix.  I made a short video (below) showing the board working.  The blue LEDs show each encoder tick.  Toward the end of the video the LCD is showing the car's heading (corrected by the gyroscope) and interrupt counts from the wheel encoders. 
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span2"&gt;
&lt;/div&gt;
&lt;div class="span6"&gt;
&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/MIwUdI9IMPc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
Here's a schematic for the UGV Board (click for a larger image).
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span2"&gt;
&lt;/div&gt;
&lt;div class="span9"&gt;
&lt;a href="https://raw.github.com/jdorweiler/Autonomous-Car/master/autonomous%20car%20schematic.png"&gt;&lt;img alt="alt text" src="images/car/autonomouscarschematic.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;Autonomous Car GUI&lt;/h3&gt;

&lt;p&gt;I've had a bit of free time while I waited for the boards to be printed.  I decided to take that time to finally
work on a GUI ground station to control the car from a laptop.  I'd been a bit apprehensive to start on this portion of the project because I really knew almost nothing about making a GUI and the whole idea seemed a bit daunting to me but it's something that would make a great addition to the project.  I decided to write the GUI using Processing since it’s pretty much just C++ code.  It turned out looking great. &lt;/p&gt;
&lt;p&gt;Below is a screen shot of the GUI.  There's a still a lot of work to be done but I think I'm off to a good start.
I've made a few changed to the autonomous car code to accommodate the new GUI.  Here’s how the whole things works now. &lt;/p&gt;
&lt;p&gt;After turning the car on it will 
sit and wait until either a start button on the car is manually pushed or it receives a start character from the 
laptop over the Xbee radios.  Once the car is running it sends back data at a user defined time interval currently
set to 100 ms.  A sync character is sent from the car to tell the computer that there’s a new data coming in. 
On the other end the data gets parsed, stored into its appropriate variable and plotted. 
I've got it set up to plot the velocity/acceleration calculated from the wheel encoders
and the distance from the waypoint on one graph.  The lower graph shows the steering angle error or how far the
steering angle differs from the desired calculated angle.  This will give a good visual for how well the PID gains are set up. 
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;img alt="gui" src="images/UGV/GUI.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
The numbers on the screen are actual test data being sent from the car using the Xbee radios just to check that the data parsing is working.  I've also added in some sliders to adjust the PID settings on the car.  The idea being 
that I could changed the gains based on how the steering error plot is looking.  This would give me a much easier 
way to tune the PID algorithm as the car is running versus having to stop it and upload the firmware on the board
for each change.  I also plan on doing the same to control the car's speed.  On the car's code I set up a timer 
interrupt to go off every 500 ms to check the serial line looking for new settings or watch for a stop command sent from the laptop. Since the car will be controlled only by the laptop I'm also planning on adding a radio signal connection/strength monitor.  This will act as switch to shut the car off if it goes out of radio contact.&lt;/p&gt;</summary><category term="PCB"></category><category term="autonomous car"></category><category term="robotics"></category></entry><entry><title>Cell phone charger on HackADay.com</title><link href="http://www.transistor.io/cell-phone-charger-on-hackadaycom.html" rel="alternate"></link><updated>2012-11-12T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2012-11-12:cell-phone-charger-on-hackadaycom.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="images/charger/charger.png" /&gt;&lt;/p&gt;
&lt;p&gt;After hurricane Sandy hit my area I was without power for 11 days.  During that time I made a simple cell &lt;a href=http://hackaday.com/2012/11/04/hackaday-links-november-4-2012/&gt;phone charger using a LM317 voltage regulator&lt;/a&gt; to stay connected to the outside world.&lt;/p&gt;</summary><category term="hackaday"></category></entry><entry><title>Autonomous Car pt. 2</title><link href="http://www.transistor.io/autonomous-car-pt-2.html" rel="alternate"></link><updated>2012-09-10T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2012-09-10:autonomous-car-pt-2.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="images/car/title_2.png" /&gt;&lt;/p&gt;
&lt;p&gt;After much work with the Python OpenCV library and testing the image processing on the car, I've decided that I'll leave the computer vision part of this project for later. The simple line detection works well for images like the ones in my previous post. But for more complicated images, such as roads without yellow lane markers, line detection won’t be enough. I'm looking into using a neural network with OpenCV to keep the car on the road. &lt;/p&gt;
&lt;p&gt;Now I am working on the steering. My goal is for the car to steer into the direction of the next waypoint from its current location. I also got a lot of new stuff for the car. Here's how it looks today. I upgraded to an Arduino mega (see below for why), Xbee for sending data wirelessly to my laptop, and a GPS module. 
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span6"&gt;
&lt;img alt="elect1" src="images/car/carelectronics1.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I spent a lot of time trying to get the steering working with the Arduino Uno. The problem is that the Uno only has one serial port. I was using this serial port for the Xbee communication. The GPS also needs a serial port, so I was running it by using the software serial library. However, the software serial works on interupts and the steering and esc need to have a constant signal. &lt;/p&gt;
&lt;p&gt;What happened was that when the interupt for the GPS would come on, the signal for the servos would stop briefly. This problem caused some serious erratic behavior and resulted in the car jumping off of my workbench several times. The Arduino Mega (borrowed from my 3D printer) solved this problem by having 4 serial ports, which is more than enough for this project. &lt;/p&gt;
&lt;p&gt;So for now I am getting all the code and computations done on the Arduino. I'll leave the computer vision and machine learning stuff for later on. I'm also thinking about replacing the Mega with a much faster &lt;a href="http://www.digilentinc.com/Products/Detail.cfm?Prod=CHIPKIT-MAX32" target="_blank"&gt;ChipKit Max32&lt;/a&gt;, which uses a 80MHz PIC32 microcontroller. The Mega is working well now, but I'm worried that the 2D Kalman filter I plan on using for the localization will slow it down too much. &lt;/p&gt;
&lt;p&gt;For the Arduino code: 
Right now I have the GPS data parsed. I also added a LED indicator on the board that is on whenever there is a valid GPS data stream. This is nice for when I'm not near the laptop to see if it has valid data. The GPS heading data and the gyro rate data are sent to a Kalman filter. The GPS heading is very slow. Visually, it seems to lag by 1-2 seconds. The car is capable of reaching up to 20mph, meaning that it could move nearly 60ft before getting a new heading update. To fix this problem, I am using the gyro rate in between those updates to correct the car's heading. So far, this is working but the updated heading is still lags a bit. I need to do some tuning on the Kalman filter to fix this. The car will turn toward the waypoint, but it ends up going in circles because the angle isn't updated fast enough. &lt;/p&gt;
&lt;p&gt;The updated angle is also sent to a PID control with the integral and dervivative portions set to zero until I get the Kalman filter tuned. This will also need a lot of tuning later on. Here's the loop portion of the code below. I'll upload the rest on github later. 
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;iframe src="http://pastebin.com/embed_iframe.php?i=Qq3XjjLd" style="border:none;width:100%"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
I also decided that I needed a way to regain control of the car if things started to go bad. There's a built-in Arduino library called PulseIn which can be used to measure a pulse position modulation (PPM) signal that put out by a radio receiver. The library can be difficult to work with. It stops the loop while measuring the time of the pulses and may completely stop the loop if it never seen the end of a pulse. This sounded like trouble, so I decided to keep it off of the main control board all together. &lt;/p&gt;
&lt;p&gt;I have several smaller ATtiny85 microcontrollers that would be perfect for this job. I wrote a quick program to read in the PPM signal from the receiver. I gave the signal a bit of a range to avoid any false positives. Any signal outside of 1300-1700ms (the typical signal is around 1500ms) sends one of the pins on the ATtiny high. If the transmitter is on and in range, then the ATtiny should see 1500ms. If it goes out of range, then this will drop to zero. If I pull the trigger on the transmitter, it will also cause the value to go out of its set range. 
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span6"&gt;
&lt;img alt="killswitch" src="images/car/killswitch.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
In the main loop on the Mega, I added a part to read in the voltage coming from the pin on the ATtiny. A voltage higher than 1.0V either means that the car is out of range or that I triggered the stop button on the transmitter. &lt;/p&gt;
&lt;iframe src="http://pastebin.com/embed_iframe.php?i=ambKsrE4" style="border:none;width:100%"&gt;&lt;/iframe&gt;</summary><category term="autonomous car"></category><category term="robotics"></category></entry><entry><title>Balancing Robot on HackADay.com</title><link href="http://www.transistor.io/balancing-robot-on-hackadaycom.html" rel="alternate"></link><updated>2012-06-25T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2012-06-25:balancing-robot-on-hackadaycom.html</id><summary type="html">&lt;p&gt;My balancing robot made it on &lt;a href="http://hackaday.com/2012/06/25/printing-and-programming-a-self-balancer/"&gt;Hackaday&lt;/a&gt; and got featured on &lt;a href="http://www.thingiverse.com/thing:25531"&gt;Thingiverse!&lt;/a&gt;. 
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
 &lt;/div&gt;
 &lt;div class="span6"&gt;
&lt;img alt="" src="images/balancingrobot/hackaday.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="balancing robot"></category><category term="robotics"></category><category term="hackaday"></category></entry><entry><title>Autonomous Car pt.1</title><link href="http://www.transistor.io/autonomous-car-pt1.html" rel="alternate"></link><updated>2012-06-05T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2012-06-05:autonomous-car-pt1.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="images/car/title_1.png" /&gt; &lt;/p&gt;
&lt;p&gt;This post will detail my plans and progress for an autonomous car. I’ll be using what I learned from
building the &lt;a href="electronics.html#robot"&gt;balancing robot&lt;/a&gt; and courses though &lt;a href="http://www.udacity.com" target="_blank"&gt;Udacity&lt;/a&gt; and &lt;a href="http://mitx.mit.edu/" target="_blank"&gt;MITx&lt;/a&gt;.
The goal is to take a small 1/10
remote controlled car and have it navigate a course on its own. To navigate the course, I plan to use an
Android phone, GPS, and an accelerometer/gyroscope. I will record a video stream through the phone
and then process it on my laptop using Python and the computer vision library &lt;a href="http://opencv.willowgarage.com/wiki/" target="_blank"&gt;OpenCV&lt;/a&gt;.
&lt;br&gt;
&lt;br&gt;
&lt;strong&gt; The Car &lt;/strong&gt;
&lt;br&gt;
I chose a 1/10 scale car so that it would be large enough to hold all of the electronics. I was worried that
the cheaper and more common 1/16 scale cars would be too small. I found this car on Amazon for about
$100. Here are some pictures of it below. I've already started working on the electronics.
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span5"&gt;
&lt;img alt="car1" src="images/car/car1.png" /&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div class="span5"&gt;

&lt;p&gt;&lt;img alt="car2" src="images/car/car2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Below is a block diagram I drew that shows my preliminary design for the software portion of the car. 
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;img alt="code" src="images/car/code.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
For the localization of the car I’ll be using a GPS sensor and accelerometer. First, the GPS will find the
starting coordinates of the car. Then the car will start moving, somewhat blindly at first. Once the car is
moving, data from the accelerometer and elapsed time can be used to calculate the velocity of the car.
These two measurements are then passed into a Kalman filter to improve the accuracy of the car’s
position.
&lt;br&gt;
&lt;br&gt;
At the same time, heading data from the GPS and gyroscope are passed into another Kalman filter to get
an accurate heading on the car. The position and heading data from the Kalman filters is then compared
to a GPS waypoint given to the sensor and motor control. Next, a heading toward the desired GPS
waypoint is calculated, and the appropriate signal is sent to the steering servo in order to point the car
in that direction.
&lt;br&gt;
&lt;br&gt;
While this process is occurring, the camera from the Android phone will stream images of the car’s path
back to my computer. On the computer, I will use Python and OpenCV to process the images. The
images will be processed looking for the edges of the road (width) and also looking for obstacles in from
of the car. Data from the OpenCV program will be sent back to the motor control, allowing the car to
deviate from its previously calculated heading and avoid objects that may get in the way.&lt;br&gt;
&lt;br&gt;
Below is the preliminary work I’ve done on the image processing. I’m using an app called Barnacle to set
up a local network between my phone and laptop and then sending the camera feed over HTTP. Then
I’m using Python to grab a snapshot of the camera feed. I’ll walk through the steps of the image
processing below. I’ll save the discussion of the theory and mathematics behind these processing
algorithms for another time and just stick with the results for now.
&lt;br&gt;
&lt;br&gt;
Here’s the original image on the left.  The first step is to convert it to grayscale, shown on the right. 
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
 &lt;div class="span5"&gt;
&lt;img alt="road" src="images/car/road.png" /&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class="span5"&gt;
&lt;img alt="road2" src="images/car/road2.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
From the gray image I run a &lt;a href="http://en.wikipedia.org/wiki/Gaussian_blur" target="_blank"&gt;Gaussian filter&lt;/a&gt; to reduce the noise and avoid finding false lines later on in the processing  (not shown).  Then the result of the Gaussian filter is passed into a &lt;a href="http://en.wikipedia.org/wiki/Canny_edge_detector" target="_blank"&gt;Canny edge detector&lt;/a&gt; to locate the edges.&lt;br /&gt;
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span2"&gt;
 &lt;/div&gt;
 &lt;div class="span5"&gt;
&lt;img alt="road3" src="images/car/road3.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
From the Canny image, you can already see the outline of the road. But if you look closely at the Canny
image, you’ll notice that those aren’t quite continuous lines. There are spots where the line breaks,
which will make doing any useful mathematics on it later more difficult. To fix this issue and clean up the
image further, I’m applying a
&lt;a href="http://en.wikipedia.org/wiki/Hough_transform" target="_blank"&gt;Hough transform&lt;/a&gt; 
to the Canny output. This transform is fairly complicated,
but the quick summary is that it looks for sections in the image that aren’t continuous but that form part
of a larger line. For this part, I’m also giving it a theta angle to restrict which lines it returns.
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span2"&gt;
 &lt;/div&gt;
 &lt;div class="span5"&gt;
&lt;img alt="road4" src="images/car/road4.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
That’s it for now.  From here I can make sure that the car stays in the middle of the road. 
&lt;br&gt;
 Next plans are to add &lt;a href="http://en.wikipedia.org/wiki/Blob_detection" target="_blank"&gt;obstacle detection&lt;/a&gt;. 
 &lt;br&gt;
 &lt;br&gt;
 &lt;br&gt;
 &lt;br&gt;&lt;/p&gt;</summary><category term="arduino"></category><category term="robotics"></category><category term="programming"></category><category term="autonomous car"></category><category term="computer vision"></category></entry><entry><title>Balancing Robot</title><link href="http://www.transistor.io/balancing-robot.html" rel="alternate"></link><updated>2012-05-27T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2012-05-27:balancing-robot.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="images/balancingrobot/title.png" /&gt;&lt;/p&gt;
&lt;p&gt;The goal of this project is to make a self balancing robot, also called an &lt;a href="http://en.wikipedia.org/wiki/Inverted_pendulum" target="_blank"&gt;inverted pendulum&lt;/a&gt;. The basic idea is that you have a mass located above its pivot point. This causes the robot to be unstable, and without any help, it will quickly fall over. Sensors on the robot will take acceleration and gyroscope measurements, which are sent to a control algorithm. As the robot starts to fall, the control algorithm will send a signal to the motor, telling it which direction and how much to move in order to keep the robot upright. 
This project involves a huge range of knowledge from mathematics, mechanics, and programming. And as I've quickly learned, the theory is a lot more complex than I originally thought. 
When I set out to make this robot, I decided to work towards a few specific goals: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Keep the cost as low as possible &lt;/li&gt;
&lt;li&gt;Print all of the mechanical/structural parts on my 3D printer &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Structural&lt;/strong&gt;
&lt;br&gt; 
I decided to use a four level design. The lower level holds the motor and the bushings for the axle. The second level holds the Arduino Uno board. The third level contains the H-bridge and the sensors. The fourth level holds the batteries. 
Designing the structural parts was fairly easy. All the levels except for the first are just flat rectangles. The first level, holding the motor and axle, was a bit more complex.  I&amp;#8217;m using spur gears to drive the wheels for  now.  I may switch to &lt;a href="http://en.wikipedia.org/wiki/Herringbone_gear" target="_blank"&gt;herringbone gears&lt;/a&gt; if backlash becomes a problem. 
Here&amp;#8217;s a picture showing the three levels (battery level not shown) &lt;/p&gt;
&lt;p&gt;&lt;img alt="robot" src="images/balancingrobot/robot.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Electronics&lt;/strong&gt;
&lt;br&gt;
I had originally planned on building my own sensor board to keep the costs down. The accelerometer and gyroscope can be bought for about $5 total. The only problem is that they&amp;#8217;re very small chips- about 3mm x 3mm. The pads are even smaller at about 0.4mm. I managed to solder a few of the connections, but ended up pulling off a pad on the accelerometer. Instead, I decided to buy a pre-made 6 degree of freedom board that had the accelerometer and gyroscope already on it. 
I&amp;#8217;m using an H-bridge (&lt;a href="http://www.ti.com/lit/ds/symlink/sn754410.pdf" target="_blank"&gt;sn754410&lt;/a&gt;) to control the motor. The logic level for the H-bridge is 4.5V, which is higher than the 3.3V that the i/o pins on the arduino can put out.  The motor will be connected to a 12V source, so I used level shifter with MOSFETs and 5V zener diodes to bring the 3.3V signal up above that level. 
Here&amp;#8217;s the completed electronics set up on a breadboard.&lt;/p&gt;
&lt;p&gt;&lt;img alt="electronics" src="images/balancingrobot/electronics.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt; 
&lt;br&gt;
The actual code to run the robot is my biggest hurdle right now. I don&amp;#8217;t have a lot of experience writing C code, so I&amp;#8217;ll consider this a crash course. So far I&amp;#8217;ve gotten the communication with the accelerometer and gyroscope working. This was actually fairly easy since both sensors run on &lt;a href="http://en.wikipedia.org/wiki/I%C2%B2C" target="_blank"&gt;I&lt;sup&gt;2&lt;/sup&gt;C&lt;/a&gt;.  I&amp;#8217;ll wait until I have the completed code to post it. 
I&amp;#8217;ve also gotten the calculation for the &lt;a href="http://en.wikipedia.org/wiki/Orbital_inclination" target="_blank"&gt;inclination angle&lt;/a&gt; to work. The inclination angle measures the angle that the Z-axis of the robot makes with the direction of gravity (from the accelerometer). This &lt;a href="http://www.analog.com/static/imported-files/application_notes/AN-1057.pdf" target="_blank"&gt;data sheet&lt;/a&gt; for a different accelerometer give a very good explanation of how to calculate the inclination angle. Here&amp;#8217;s the take home message: 
The inclination angle can be using the following equation:
&lt;br&gt;
&lt;br&gt;
&lt;img alt="eq1" src="images/balancingrobot/eq1.png" /&gt;
&lt;br&gt;
&lt;br&gt;
Where g is the vector in the direction of gravity and given by the magnitude of the X and Z vectors from the acceleration data. 
&lt;br&gt;
&lt;br&gt;
&lt;img alt="eq2" src="images/balancingrobot/eq2.png" /&gt;
&lt;br&gt;
&lt;br&gt;
From this, it&amp;#8217;s easy to do a linear approximation for the inclination angle given by: 
&lt;br&gt;
&lt;br&gt;
&lt;img alt="eq3" src="images/balancingrobot/eq3.png" /&gt;
&lt;br&gt;
&lt;br&gt;
This equation will output a number ranging from 0 (upright, 0 degrees) to 1 (fallen, 90 degrees).  The plot below (borrowed from the data sheet) shows the exact Θ calculation and the  linear approximation that I&amp;#8217;ll be using.  The linear approximation fits very well at Θ angles less than  about 20&lt;sup&gt;o&lt;/sup&gt;.  This is perfectly fine for the robot since it won&amp;#8217;t be able to recover from a 20&lt;sup&gt;o&lt;/sup&gt; Θ angle anyway. 
&lt;br&gt;
&lt;br&gt;
&lt;img alt="graph" src="images/balancingrobot/graph.png" /&gt;
&lt;br&gt;
&lt;br&gt;
The drawing below shows the inclination angle (Θ) and how it changes as the robot falls. The inclination angle when it&amp;#8217;s standing perfectly upright will be 0 and it increases until it hits the ground, at which point the inclination will be 1 or sin&lt;sup&gt;-1&lt;/sup&gt;(1)=π/2.
&lt;br&gt;
&lt;br&gt;
&lt;img alt="incl" src="images/balancingrobot/inclination.png" /&gt;
&lt;br&gt;
&lt;br&gt;
This is what the output for the inclination looks like on the serial monitor.
&lt;br&gt;
&lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span12"&gt;
&lt;img alt="test" src="images/balancingrobot/acceltest.png" /&gt;
&lt;/div&gt;
&lt;/div
&lt;br&gt;
&lt;br&gt;
The next plan is to get the gyroscope calculation to work and use it with the accelerometer in a &lt;a href="http://en.wikipedia.org/wiki/Kalman_filter" target="_blank"&gt;Kalman filter&lt;/a&gt;.
&lt;br&gt;
&lt;br&gt;
&lt;a name="robot2"&gt;&lt;/a&gt;
          &lt;/br&gt;
          &lt;/br&gt;
&lt;h2&gt;Balancing Robot Ver. 2&lt;/h2&gt;
I found a fatal flaw in the design for the first version of the balancing robot.  Now that I have everything working on it, I can 
see that the motor from the surplus store does not have nearly have enough torque to keep the robot from falling.&lt;br /&gt;
As the robot begins to tip, the motor tries to catch it, but it just can't do it.&lt;br /&gt;
&lt;br&gt;
This is what it looks like.  It will fall over pretty quickly if I let go of it.  The two LEDs on the controller board
           indicate its forward or reverse direction, so you can see that it's trying to balance. 
           &lt;br&gt;
           &lt;br&gt;
           &lt;iframe width="420" height="315" src="http://www.youtube.com/embed/KAWaZL0QWDc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
           &lt;br&gt;
           &lt;br&gt;
           I changed the design a bit to use some stepper motors from an old laser printer.  Stepper motors have plenty
           of torque, but they don't move very quickly, which I worry may be another problem.  This idea was also short-lived.  The stepper motors
           did have plenty of torque, but their jerky movement caused a lot of vibration in the robot.  This vibration made the gyroscope sensor very 
           noisy.  I decided to order some continuous rotation servos and try to use them instead.  Servos also don't move very quickly but have plenty of 
           torque and should move much more smoothly than the stepper motors.&lt;br /&gt;
           &lt;br&gt;
           &lt;br&gt;
That's enough of the design aspect for now.  On to the rest of the theory. &lt;/p&gt;
&lt;p&gt;I have now implemented both the Kalman filter and PID controller.  PID stands for Porportional Integral Derivative.  Here is a nice block diagram showing the basic flow of data for the PID (borrowed from wikipedia).  The raw data goes into the PID and different parameters are applied to it.  The different parts of the PID are then combined and sent to the robot as a motor movement command.  Then a feedback loop
           sends the results of the actual motion back through the filters again. 
           &lt;br&gt; 
           &lt;br&gt;
           &lt;img alt="pid" src="images/balancingrobot/pid.png" /&gt;
           &lt;br&gt;
           &lt;br&gt;
           Mathmatically the PID control looks like this: 
           &lt;br&gt;
           &lt;img alt="pideq" src="images/balancingrobot/pideq.png" /&gt;
           &lt;br&gt;
           Where Kp, Ki, and Kd represent the proportional, integral, and derivative perameters, respectively. The proportional parameter
           acts as a mutiplier and produces an output that is proportional to the current error measurement.  The integral parameter
           represents the accumulation of past errors.  A high Ki will act to resist even the smallest change in movement. Since it is
           based on past errors, it may cause the present value to overshoot the desired point.  The derivative parameter is the slope of the 
           error over time and effectively works to dampen any large corrections that might otherwise overshoot the set point.  Large Kd 
           values will also greatly slow the correction response.
           &lt;br&gt;
           &lt;br&gt;
            The Kalman filter is a complex subject.  I'll try my best to give a simple (non-mathematical) explanation.
           The basic idea is that a perfect model for the motion and angle of the robot exists. Unfortunately, 
           this perfect model is very difficult or impossible to determine.  There are just too many unknown variables in 
           the system to determine this model.  Instead, we can use the imperfect measurements 
           from the accelerometer, gyroscope, and a Kalman filter to get a very good estimate of the angle. 
           &lt;br&gt;
           &lt;br&gt;
           The two sensors give an estimate of the angle, but their measurements are not 100% accurate.  There is noise, bias,
           and drift to deal with.  The Kalman filter is a way to put these two sensor measurements together to get a
           better estimate of what is happening with the robot i.e., the inclination angle.
           &lt;br&gt;
           &lt;br&gt;
           The end result of the PID and Kalman filter is to clean up what will otherwise be a noisy signal.  The signal from the accelerometer is dependent on the gravitational force felt on each axis.  As the robot falls over, it will show an acceleration toward the floor.  Likewise, as the fall is corrected, it will show acceleration away from the floor.  If the acceleration away from the floor is great enough, the signal from the accelerometer will look as if the robot has greatly over-corrected.  This is bad for any steady equilibrium.  The two filters will hopefully take care of this problem. 
           &lt;br&gt;
           &lt;br&gt;
           &lt;img alt="pidtest" src="images/balancingrobot/pidtest.png" /&gt;
           &lt;br&gt;
           &lt;br&gt;
           &lt;a name="robot3"&gt;&lt;/a&gt;
          &lt;/br&gt;
          &lt;/br&gt;
&lt;h2&gt;Balancing Robot Ver. 3&lt;/h2&gt;
           &lt;br&gt;
           &lt;p&gt;Robot gets a makeover plus a DIY printed circuit board&lt;/p&gt;
&lt;p&gt;The servo motors arrived, and I did a quick hack job of gluing the new motors on in order to test them.  Good news, it works! The new motors do a pretty good job of balancing the robot.  At 50 rpm max, they're a bit on the slow side, so the robot has a bit of trouble recovering from large pushes. 
           &lt;br&gt;
           &lt;br&gt;
           I decided to make a new printed motor platform specifically to hold the new servos.  I also printed new wheels.  I was
           worried about the ridigity of the whole robot after seeing how excessive vibrations caused the sensors to go 
           crazy in version 2.  The new wheels are very rigid, and everything is nicely glued together now.&lt;br /&gt;
           &lt;br&gt;
           &lt;br&gt;
           &lt;div class="row"&gt;
           &lt;div class="span5"&gt;
           &lt;img alt="robot3" src="images/balancingrobot/robot3.png" /&gt; 
           &lt;/div&gt;
           &lt;div class="span6"&gt;
           &lt;iframe width="420" height="315" src="http://www.youtube.com/embed/C3bnK1rgoRc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
           &lt;/div&gt;
           &lt;/div&gt;
           &lt;br&gt;
           &lt;br&gt;
           I have been visiting the local hacker space (&lt;a href="http://www.fubarlabs.org/" target="_blank"&gt;FUBAR Labs&lt;/a&gt;) where I learned about a very easy-to-use PCB layout software called 
           &lt;a href="http://fritzing.org/" target="_blank"&gt;Fritzing&lt;/a&gt;.  I used this program to design a protoype for 
           an Arduino motor/sensor shield.  I took the original H-bridge design and expanded it to be more useful.  The board
           has the H-bridge, which can control two DC motors or one stepper motor, accelerometer/gyroscope, and two servo connections.
           &lt;br&gt;
           &lt;br&gt;
           &lt;img alt="pcb1" src="images/balancingrobot/pcb1.png" /&gt; 
           &lt;br&gt;
           &lt;br&gt;
           I printed out the design using a laser printer onto &lt;a href="http://www.digikey.com/product-detail/en/50-1101/182-1003-ND/3386" target="_blank"&gt;dextrin coated paper&lt;/a&gt;.
           Then the toner was transferred to the copper board using a laminator. Finally, the excess copper was etched away using ferric chloride. 
           Here's the etched board.
           &lt;br&gt;
           &lt;br&gt;
           &lt;img alt="pcb3" src="images/balancingrobot/pcb3.png" /&gt;
           &lt;br&gt;
           &lt;br&gt;
           Here's the assembled board on the robot.  Its at a point now where it can balance indefinitely and recover from small pushes.  The servos are 
           a bit too slow for it to recover from larger pushes like I expected.
           &lt;br&gt;
           &lt;br&gt;&lt;br /&gt;
           &lt;div class="row"&gt;
           &lt;div class="span6"&gt;
            &lt;img alt="robot4" src="images/balancingrobot/robot4.png" /&gt;
            &lt;/div&gt;
            &lt;div class="span6"&gt; 
            &lt;img alt="robot5" src="images/balancingrobot/robot5.png" /&gt;
            &lt;/div&gt;
            &lt;/div&gt;
            &lt;br&gt;
            &lt;br&gt;
            And a video of the final robot!
            &lt;br&gt;
            &lt;br&gt;
            &lt;iframe width="420" height="315" src="http://www.youtube.com/embed/LAWjUlzAYf0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
            &lt;br&gt;
            &lt;br&gt;
            I've placed all of the code and 3d printer files on my &lt;a href="http://github.com/jdorweiler/BalancingRobot"&gt;Github page&lt;/a&gt;.
            And here are a few links that I found very useful in builing this robot 
            &lt;br&gt;
            &lt;a href="http://www.arduino.cc/cgi-bin/yabb2/YaBB.pl?num=1284738418/all"&gt;http://www.arduino.cc/cgi-bin/yabb2/YaBB.pl?num=1284738418/all&lt;/a&gt;
            &lt;br&gt;
            &lt;a href="http://www.kerrywong.com/2012/03/08/a-self-balancing-robot-i"&gt;http://www.kerrywong.com/2012/03/08/a-self-balancing-robot-i&lt;/a&gt;&lt;/p&gt;</summary><category term="robotics"></category><category term="programming"></category><category term="balancing robot"></category><category term="PCB"></category></entry><entry><title>DIY Carbon Fiber Bike Parts</title><link href="http://www.transistor.io/diy-carbon-fiber-bike-parts.html" rel="alternate"></link><updated>2012-03-22T00:00:00+00:00</updated><author><name>Jason</name></author><id>tag:www.transistor.io,2012-03-22:diy-carbon-fiber-bike-parts.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="images/bike/title.png" /&gt;&lt;/p&gt;
&lt;p&gt;I began reading about carbon fiber design and layup briefly and realized that carbon fiber design can done at home with a minimal amount of equipment. I decided to try a small part first so get the hang of it. I wanted to mold a part from my mountain bike with the idea that at some point, I would replace the whole frame with carbon fiber parts. 
Luckily my bike has a removable seat stay. That's the part of the frame that connects from the rear wheel to just below the seat. The removable seat stay design allowed for removal and easy copying of the design. However, the seat stay is also a critical structural component of the frame. 
 On to making the mold.. 
 This is by far the most critical and time-consuming portion of the project. There are two options: make a mold of the outside of the part, or make a foam copy of the part. I decided on the the foam option because it is much cheaper. I used regular pink insulation foam from a hardware store. For $25, I bought more foam that I will ever use. 
 I traced the seat stay on the foam and then encountered a problem- the foam is actually pretty difficult to cut. I learned that a hot wire is a common way to cut dense foam. Still trying to keep the project as cheap as possible, I set out to make my own hot wire cutter. 
 Here's the seat stay on my homemade hot wire cutter.
 &lt;br&gt;
 &lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;img alt="" src="images/bike/cutter.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
 &lt;br&gt;
 I made it out of an old desk, some scrap wood, an old guitar string, and a battery charger. The guitar string is stretched between the two wooden poles and the battery charger is hooked up to either end. The charger puts out 12 amps, which is more than enough to get the string glowing red hot. The B string was best for this. The E string burnt up almost instantly. I don't have a picture, but version 2.0 has the excess string wrapped in a coil under the desk to act as a variable resistor to control the temperature of the wire. 
 Here's the nearly finished foam core on my bike. 
 &lt;br&gt;
 &lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;img alt="" src="images/bike/foam.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
 &lt;br&gt;
 After a few small alterations and some sanding, the foam core was ready to be wrapped in carbon fiber. Unfortunately, I don't have any picture of the actual layup. As I learned, making carbon fiber parts is very messy (stray fibers everywhere and epoxy mess) so I didn't have a chance to get the camera out. 
 I cut up strips of carbon fiber about 1 inch wide and started wrapping the strips around the foam core. Then I applied a 1:2 epoxy:catalyst mixture to the outside. This process was repeated 9 times to produce a very strong part. Remember I don't want this crucial part to break while I'm riding! 
 This picture was taken about about halfway through the process. I let the first two layers cure overnight before finishing the rest.
 &lt;br&gt;
 &lt;br&gt; 
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;img alt="" src="images/bike/cfpart1.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
 &lt;br&gt;
 And several layers later. The final part! It's not pretty, but it's functional, and so far I have about 200 miles of rough trail riding on it.
 &lt;br&gt;
 &lt;br&gt; 
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span5"&gt;
&lt;img alt="" src="images/bike/cfpart2.png" /&gt;
 &lt;/div&gt;
&lt;div class="span5"&gt;
&lt;img alt="" src="images/bike/cfpart3.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
 &lt;br&gt;
 I've also started working on a copy of the shock linkage (the black bar that connects to the top of the seat stay).  It's still a work in progress.
 I made the shock link a bit differently.  Instead of using a foam core I made a mold from the original part.  For the mold I used a heavy flexible molding rubber.  The flexibility of the rubber allows it to be easily removed during the de-molding process.  A more rigid mold may get stuck and can't be removed with out ruining it.  I found that out when I tried to use polyester for the first attempt.
 One downside of the flexibility of the rubber mold is that it wont hold its&amp;#8217; shape in the lamination process.  To solve this problem I made a fiberglass backing to make it more rigid.  Kind of a mold of a mold.
 Here's the rubber mold and it's fiberglass backing.
 &lt;br&gt;
 &lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;img alt="" src="images/bike/cfpart4.png" /&gt; 
&lt;/div&gt;
&lt;/div&gt;
 &lt;br&gt;
 The lamination using a mold is a bit different that what I did before.  This time I laid all of the layers down into the mold with epoxy.  I then sealed a special bag around the whole thing and applied a strong vacuum to it.  This sucks epoxy through all the fibers and removes any excess, making the final part lighter and stronger.
 This is what it looked like in the vacuum bag.
 &lt;br&gt;
 &lt;br&gt;
&lt;div class="row"&gt;
&lt;div class="span1"&gt;
&lt;/div&gt;
&lt;div class="span8"&gt;
&lt;img alt="" src="images/bike/cfpart5.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
 All that's left to do now is drill out the holes for the bearings.  Then sand and apply an outer coat of epoxy to make it look nice.&lt;/p&gt;</summary><category term="biking"></category><category term="carbon fiber"></category></entry></feed>